<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JSONiq.ent">
%BOOK_ENTITIES;
]>
<section id="chapter-selectors" lang="en-US">
	<title>Selectors</title>
	 <figure>
		<title>PostfixExpr</title>
		 <mediaobject>
			<imageobject>
				<imagedata fileref="images/PostfixExpr.png" />
			</imageobject>

		</mediaobject>

	</figure>
	 <para>
		Like in JavaScript, it is possible to navigate through data.
	</para>
	 <para>
		JSONiq supports filtering items from a sequence, looking up the value associated with a given key in an object, looking up the item at a given position in an array, and looking up all items in an array.
	</para>
	 <section>
		<title>Object field selector</title>
		 <figure>
			<title>ObjectLookup</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/ObjectLookup.png" />
				</imageobject>

			</mediaobject>

		</figure>
		 <para>
			The simplest way to navigate in an object is similar to JavaScript, using a dot. This will work as soon as you do not push it too much: alphanumerical characters, dashes, underscores - just like unquoted keys in object constructors, any NCName is allowed.
		</para>
		 <example>
			<title>Object lookup</title>
			 
<programlisting>
{ "foo" : "bar" }.foo
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			Since JSONiq expressions are composable, you can also use any expression for the left-hand side. You might need parentheses depending on the precedence.
		</para>
		 <example>
			<title>Lookup on a single-object collection.</title>
			 
<programlisting>
collection("one-object").foo
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			The dot operator does an implicit mapping on the left-hand-side, i.e., it applies the lookup in turn on each item. Lookup on an object returns the value associated with the supplied key, or the empty sequence if there is none. Lookup on any item which is not an object (arrays and atomics) results in the empty sequence.
		</para>
		 <example>
			<title>Object lookup with an iteration on several objects</title>
			 
<programlisting>
({ "foo" : "bar" }, { "foo" : "bar2" }, { "bar" : "foo" }).foo
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar bar2
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Object lookup with an iteration on a collection</title>
			 
<programlisting>
collection("captains").name
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					James T. Kirk Jean-Luc Picard Benjamin Sisko Kathryn Janeway Jonathan Archer Samantha Carter
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Object lookup on a mixed sequence</title>
			 
<programlisting>
({ "foo" : "bar1" }, [ "foo", "bar" ], { "foo" : "bar2" }, "foo").foo
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar1 bar2
				</para>
			</formalpara>
		</example>
		 <para>
			Of course, unquoted keys will not work for strings that are not NCNames, e.g., if the field contains a dot or begins with a digit. Then you will need quotes.
		</para>
		 <example>
			<title>Quotes for object lookup</title>
			 
<programlisting>
{ "foo bar" : "bar" }."foo bar"
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			If you use an expression on the right side of the dot, it must always have parentheses. The result of the right-hand-side expression is cast to a string. An error is raised if the cast fails.
		</para>
		 <example>
			<title>Object lookup with a nested expression</title>
			 
<programlisting>
{ "foobar" : "bar" }.("foo" || "bar")
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Object lookup with a nested expression</title>
			 
<programlisting>
{ "foobar" : "bar" }.("foo", "bar")
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					An error was raised: sequence of more than one item can not be treated as type xs:string
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Object lookup with a nested expression</title>
			 
<programlisting>
{ "1" : "bar" }.(1)
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			Variables, or a context item reference, do not need parentheses. Variables are introduced later, but here is a sneak peek:
		</para>
		 <example>
			<title>Object lookup with a variable</title>
			 
<programlisting>
let $field := "foo" || "bar"
return { "foobar" : "bar" }.$field
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>

	</section>
	
	 <section>
		<title>Array member selector</title>
		 <figure>
			<title>ArrayLookup</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/ArrayLookup.png" />
				</imageobject>

			</mediaobject>

		</figure>
		 <para>
			Array lookup uses double square brackets.
		</para>
		 <example>
			<title>Array lookup</title>
			 
<programlisting>
[ "foo", "bar" ] [[2]]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			Since JSONiq expressions are composable, you can also use any expression for the left-hand side. You might need parentheses depending on the precedence.
		</para>
		 <example>
			<title>Array lookup after an object lookup</title>
			 
<programlisting>
{ field : [ "one",  { "foo" : "bar" } ] }.field[[2]].foo
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <para>
			The array lookup operator does an implicit mapping on the left-hand-side, i.e., it applies the lookup in turn on each item. Lookup on an array returns the item at that position in the array, or the empty sequence if there is none (position larger than size or smaller than 1). Lookup on any item which is not an array (objects and atomics) results in the empty sequence.
		</para>
		 <example>
			<title>Array lookup with an iteration on several arrays</title>
			 
<programlisting>
([ 1, 2, 3 ], [ 4, 5, 6 ])[[2]]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					2 5
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Array lookup with an iteration on a collection</title>
			 
<programlisting>
collection("captains").series[[1]]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					The original series The next generation The next generation The next generation Entreprise Voyager
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Array lookup on a mixed sequence</title>
			 
<programlisting>
([ 1, 2, 3 ], [ 4, 5, 6 ], { "foo" : "bar" }, true)[[3]]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					3 6
				</para>
			</formalpara>
		</example>
		 <para>
			The expression inside the double-square brackets may be any expression. The result of evaluating this expression is cast to an integer. An error is raised if the cast fails.
		</para>
		 <example>
			<title>Array lookup with a right-hand-side expression</title>
			 
<programlisting>
[ "foo", "bar" ] [[ 1 + 1 ]]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					bar
				</para>
			</formalpara>
		</example>
		 <figure>
			<title>ArrayUnboxing</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/ArrayUnboxing.png" />
				</imageobject>

			</mediaobject>

		</figure>
		 <para>
			You can also extract all items from an array (i.e., as a sequence) with the [] syntax. The [] operator also implicitly iterates on the left-hand-side, returning the empty sequence for non-arrays.
		</para>
		 <example>
			<title>Extracting all items from an array</title>
			 
<programlisting>
[ "foo", "bar" ][]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					foo bar
				</para>
			</formalpara>
		</example>
		 <example>
			<title>Extracting all items from arrays in a mixed sequence</title>
			 
<programlisting>
([ "foo", "bar" ], { "foo" : "bar" }, true, [ 1, 2, 3 ] )[]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					foo bar 1 2 3
				</para>
			</formalpara>
		</example>

	</section>
	
	 <section>
		<title>Sequence predicates</title>
		 <figure>
			<title>Predicate</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/Predicate.png" />
				</imageobject>

			</mediaobject>

		</figure>
		 <para>
			A predicate allows filtering a sequence, keeping only items that fulfill it.
		</para>
		 <para>
			The predicate is evaluated once for each item in the left-hand-side sequence, with the context item set to that item. The predicate expression can use $$ to access this context item.
		</para>
		 <figure>
			<title>ContextItemExpr</title>
			 <mediaobject>
				<imageobject>
					<imagedata fileref="images/ContextItemExpr.png" />
				</imageobject>

			</mediaobject>

		</figure>
		 <para>
			If the predicate evaluates to an integer, it is matched against the item position in the left-hand side sequence automatically
		</para>
		 <example>
			<title>Predicate expression</title>
			 
<programlisting>
(1 to 10)[2]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					2
				</para>
			</formalpara>
		</example>
		 <para>
			Otherwise, the result of the predicate is converted to a boolean.
		</para>
		 <para>
			All items for which the converted predicate result evaluates to true are then output.
		</para>
		 <example>
			<title>Predicate expression</title>
			 
<programlisting>
(1 to 10)[$$ mod 2 eq 0]
</programlisting>
			 <formalpara>
				<title>Result (run with Zorba):</title>
				<para>
					2 4 6 8 10
				</para>
			</formalpara>
		</example>

	</section>

</section>


