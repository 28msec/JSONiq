<chapter id="chapter-functions">
  <title>Function Library</title>
  <para>JSONiq provides a rich set of functions.</para>
  <section>
    <title>JSON specific functions.</title>
    <para>Some functions are specific to JSON.</para>
    <section>
      <title>keys</title>
      <para>
        This function returns the keys of an object in an implementation-dependent order.
      </para>
      <para>
        <code>keys($o as object) as string*</code>
      </para>
      <example>
        <title>Getting all keys in an object</title>
        <programlisting>
let $o := { "a" : 1, "b" : 2 }
return keys($o)
        </programlisting>
      <para>Results:</para><programlisting>"a"
"b"
</programlisting></example>
      <example>
        <title>Retrieving all Pairs from an Object:</title>
        <programlisting>
let $map := { "eyes" : "blue", "hair" : "fuchsia" }
for $key in keys($map)
return { $key : $map.$key }
        </programlisting>
      <para>Results:</para><programlisting>{
  "eyes" : "blue"
}
{
  "hair" : "fuchsia"
}
</programlisting></example>
    </section>
    <section>
      <title>members</title>
      <para>This functions returns all values in an Array.</para>
      <para>
        <code>members($a as array) as item*</code>
      </para>
      <example>
        <title>Retrieving the members of an array</title>
        <programlisting>
let $planets :=  [ "mercury", "venus", "earth", "mars" ]
return members($planets)
        </programlisting>
      <para>Results:</para><programlisting>"mercury"
"venus"
"earth"
"mars"
</programlisting></example>
    </section>
    <section>
      <title>null</title>
      <para>
        This function returns the JSON null.
      </para>
      <para>
        <code>null() as null</code>
      </para>
    </section>
    <section>
      <title>parse-json</title>
      <para> This function parses its first parameter (a string) as JSON, and returns the resulting
        object or array (or a sequence thereof). </para>
      <para>
        <code>parse-json($arg as string?) as json-item*</code>
      </para>
      <para>
        <code>parse-json($arg as string?, $options as object) as json-item*</code>
      </para>
      <para> The object optionally supplied as the second parameter may contain additional options.
        The value associated with the key "jsoniq-multiple-top-level-items" must be a boolean. If it is not a boolean, an error is raised.</para>
      <para>If
        this is boolean is false, the string must contain exactly one object or array. If it is
        true, several of them are allowed, separated by whitespaces only in the input string.
      </para>
      <para>
        If parsing is not successful, an error is raised. Parsing is considered in particular to be non-successful if
        the boolean associated with "jsoniq-multiple-top-level-items" in the additional parameters is false and there is
        extra content after parsing a single abject or array.
      </para>
      <example>
        <title>Parsing a JSON document</title>
        <programlisting>
parse-json("{ \"foo\" : \"bar\" }")
        </programlisting>
      <para>Results:</para><programlisting>{
  "foo" : "bar"
}
</programlisting></example>
      <example>
        <title>Parsing multiple, whitespace-separated JSON documents</title>
        <programlisting>
parse-json("{ \"foo\" : \"bar\" } { \"bar\" : \"foo\" }", { "jsoniq-multiple-top-level-items" : true })
        </programlisting>
      <para>Results:</para><programlisting>{
  "foo" : "bar"
}
{
  "bar" : "foo"
}
</programlisting></example>
    </section>
    <section>
      <title>size</title>
      <para>
        This function returns the size of the supplied array.
      </para>
      <para>
        <code>size($a as array) as integer</code>
      </para>
      <example>
        <title>Retrieving the size of an array</title>
        <programlisting>
let $a := [1 to 10]
return size($a)
        </programlisting>
      <para>Results:</para><programlisting>10
</programlisting></example>
    </section>
    <section>
      <title>accumulate</title>
      <para> This function dynamically builds an object, like the {| |} syntax, except that it does not throw
        an error upon pair collision. Instead, it accumulates them into an array. </para>
      <programlisting>
declare function accumulate($o as object*) as object
{
  jn:object(
    let $all-keys :=
      for $object in $o
      return keys($object)
    for $distinct-key := distinct-values($all-keys)
    let $values := $o.$distinct-key
    return
      if (count($values) eq 1)
      then { $distinct-key : $values }
      else { $distinct-key : [ $values ] }
  )
};
      </programlisting>
    </section>
    <section>
      <title>descendant-objects</title>
      <para> This function returns all objects contained within a JSON item, regardless of depth. </para>
      <programlisting>
declare function descendant-objects($i as json-item) as object*
{
  typeswitch($i)
  case object return (
      $i,
      for $k in keys($i)
      let $v := $i.$k
      where $v instance of json-item
      return descendant-objects($v)
    )
  case array return (
      for $v in $i()
      where $v instance of json-item
      return descendant-objects($v)
    )
  default return ()
};
      </programlisting>
    </section>
    <section>
      <title>descendant-pairs</title>
      <para>
        This function returns all descendant pairs of an object.
      </para>
      <programlisting>
declare function descendant-pairs($o as object)
{
  for $k in keys($o)
  let $v := $o.$k
  return (
    { $k : $v },
    typeswitch ($v)
    case object return descendant-pairs($v)
    default return ()
  )
};
      </programlisting>
      <example>
        <title>Accessing all descendant pairs</title>
        <programlisting>
let $o := 
{
  "first" : 1,
  "second" : { 
    "first" : "a", 
    "second" : "b" 
  }
}
return descendant-pairs($o)
        </programlisting>
      <para>Error:</para><programlisting>"descendant-pairs": function with arity 1 not declared</programlisting></example>
    </section>
    <section>
      <title>flatten</title>
      <para>This function recursively "flattens" the array.</para>
      <programlisting>
declare function flatten($a as array) as item*
{
  for $value in $a()
  return typeswitch ($value)
         case array return flatten($value)
         default return $value
};
	  </programlisting>
    </section>
    <section>
      <title>intersect</title>
      <para>This function returns the intersection of two objects, and aggregates values corresponding
        to the same name into an array.</para>
      <programlisting>
declare function intersect($o as object*)
{
  {|
    let $common-keys := keys(head($o))[ every $object in tail($o)
                                           satisfies keys($object) = $$ ]
    for $key in $common-keys
    let $values := $o.$key
    return
      if (count($values) eq 1)
      then { $key : $values }
      else { $key : [ $values ] }
  |}
};
      </programlisting>
    </section>
    <section>
      <title>project</title>
      <para>This function projects an object by filtering its pairs.</para>
      <programlisting>
declare function project($o as object, $s as string*) as object
{
  {|
    for $key in $s
    let $value := $o.$key
    where exists ($value)
    return { $key : $value }
  |}
};
      </programlisting>
      <example>
        <title>Projecting an object 1</title>
        <programlisting>
let $o := {
  "Captain" : "Kirk",
  "First Officer" : "Spock",
  "Engineer" : "Scott"
  }
return project($o, ("Captain", "First Officer"))
        </programlisting>
      <para>Results:</para><programlisting>{
  "Captain" : "Kirk",
  "First Officer" : "Spock"
}
</programlisting></example>
      <example>
        <title>Projecting an object 2</title>
        <programlisting>
let $o := {
  "Captain" : "Kirk",
  "First Officer" : "Spock",
  "Engineer" : "Scott"
  }
return project($o, "XQuery Evangelist")
        </programlisting>
      <para>Results:</para><programlisting>{
}
</programlisting></example>
    </section>
    <section>
      <title>values</title>
      <para>This functions returns all values in an Object.</para>
      <programlisting>
declare function values($i as object) as item* {
  keys($i) ! $i.($$)
};
      </programlisting>
    </section>
    <section>
      <title>encode-for-roundtrip</title>
      <para>
        This function encodes any sequence of items, even containing non-JSON types, to a sequence of JSON items that can be serialized as pure JSON, in a way that it can be
        parsed and decoded back using decode-from-roundtrip. JSON features are left intact, while atomic items annotated with a non-JSON type are converted to objects embedding all necessary information.
      </para>
      <para>
        <code>encode-for-roundtrip($items as item*) as json-item*</code>
      </para>
    </section>
    <section>
      <title>decode-from-roundtrip</title>
      <para>
        This function decodes a sequence previously encoded with encode-for-roundtrip.
      </para>
      <para>
        <code>decode-from-roundtrip($items as json-item*) as item*</code>
      </para>
    </section>
  </section>
  <section>
    <title>Functions taken from XQuery</title>
    <itemizedlist>
      <listitem>
        <para>Access to the external environment: collection#1</para>
      </listitem>
      <listitem>
        <para>Function to turn atomics into booleans for use in two-valued logics: boolean#1</para>
      </listitem>
      <listitem>
        <para>Raising errors: error#0, error#1, error#2, error#3.</para>
      </listitem>
      <listitem>
        <para>Functions on numeric values: abs#1, ceilingabs#1, floorabs#1, roundabs#1, round-half-to-even#1</para>
      </listitem>
      <listitem>
        <para>Parsing numbers: number#0, number#1</para>
      </listitem>
      <listitem>
        <para>Formatting integers: format-integer#2, format-integer#3</para>
      </listitem>
      <listitem>
        <para>Formatting numbers: format-number#2, format-number#3</para>
      </listitem>
      <listitem>
        <para>Trigonometric and exponential functions: pi#0, exp#1, exp10#1, log#1, log10#1, pow#2, sqrt#1, sin#1, cos#1, tan#1, asin#1, acos#1, atan#1, atan2#1</para>
      </listitem>
      <listitem>
        <para>Functions to assemble and disassemble strings: codepoints-to-string#1, string-to-codepoints#1</para>
      </listitem>
      <listitem>
        <para>Comparison of strings: compare#2, compare#3, codepoint-equal#2</para>
      </listitem>
      <listitem>
        <para>Functions on string values: concat#2, string-join#1, string-join#2, substring#2, substring#3, string-length#0, string-length#1, normalize-space#0, normalize-space#1, normalize-unicode#1, normalize-unicode#2, upper-case#1, lower-case#1, translate#3</para>
      </listitem>
      <listitem>
        <para>Functions based on substring matching: contains#2, contains#3, starts-with#2, starts-with#3, ends-with#2, ends-with#3, substring-before#2, substring-before#3, substring-after#2, substring-after#3</para>
      </listitem>
      <listitem>
        <para>String functions that use regular expressions: matches#2, matches#3, replace#3, replace#4, tokenize#2, tokenize#3</para>
      </listitem>
      <listitem>
        <para>Functions that manipulate URIs: resolve-uri#1, resolve-uri#2, encode-for-uri#1, iri-to-uri#1, escape-html-uri#1</para>
      </listitem>
      <listitem>
        <para>General functions on sequences:  empty#1, exists#1, head#1, tail#1, insert-before#3, remove#2, reverse#1, subsequence#2,  subsequence#3, unordered#1</para>
      </listitem>
      <listitem>
        <para>Function that compare values in sequences: distinct-values#1, distinct-values#2, index-of#2, index-of#3, deep-equal#2. deep-equal#3</para>
      </listitem>
      <listitem>
        <para>Functions that test the cardinality of sequences: zero-or-one#1, one-or-more#1, exactly-one#1</para>
      </listitem>
      <listitem>
        <para>Aggregate functions: count#1, avg#1, max#1, min#1, sum#1</para>
      </listitem>
      <listitem>
        <para>Serializing functions: serialize#1 (unary)</para>
      </listitem>
      <listitem>
        <para>Context information: current-dateTime#1, current-date#1, current-time#1, implicit-timezone#1, default-collation#1</para>
      </listitem>
      <listitem>
        <para>Constructor functions: for all builtin types, with the name of the builtin type and unary. Equivalent to a cast expression.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>