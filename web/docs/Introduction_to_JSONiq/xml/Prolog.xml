<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="chapter-prolog" lang="en-US">
	<title>Prologs</title>
	 <para>
		This section introduces prologs, which allow declaring functions and global variables that can then be used in the main query. A prolog also allows setting some default behaviour.
	</para>
	 <para>
		The prolog appears before the main query and is optional. It can contain setters and module imports, followed by function and variable declarations.
	</para>
	 <para>
		Module imports are explained in the next chapter.
	</para>
	 <section>
		<title>Setters.</title>
		 <para>
			Setters allow to specify a default behaviour for various aspects of the language.
		</para>
		 <section>
			<title>Default Ordering Mode</title>
			 <para>
				This specifies the default behaviour of for clauses, i.e., if they bind tuples in the order in which items occur in the binding sequence. It can be overriden with ordered and unordered expressions.
			</para>
			 <example>
				<title>A default ordering setter.</title>
				 
<programlisting>
declare ordering unordered;
for $answer in collection("answers")
return {
  "owner" : $answer.owner.display_name,
  "score" : $answer.score
}
</programlisting>
				 <para>
					Results:
				</para>
				
<programlisting>{
  "owner" : "Ubiguchi",
  "score" : 7
}
{
  "owner" : "Rob Wells",
  "score" : 4
}
{
  "owner" : "Victor Nicollet",
  "score" : 17
}
{
  "owner" : "descent89",
  "score" : 1
}
{
  "owner" : "JasonSmith",
  "score" : 34
}
{
  "owner" : "JasonSmith",
  "score" : 6
}
{
  "owner" : "JasonSmith",
  "score" : 0
}
{
  "owner" : "JasonSmith",
  "score" : 1
}
</programlisting>
			</example>

		</section>
		
		 <section>
			<title>Default Ordering Behaviour for Empty Sequences</title>
			 <para>
				This specifies whether empty sequences come first or last in an ordering clause. It can be overriden by the corresponding directives in such clauses.
			</para>
			 <example>
				<title>A default ordering for empty sequences.</title>
				 
<programlisting>
declare default order empty least;
for $x in ({ "foo" : "bar" }, {})
order by $x.foo
return $x
</programlisting>
				 <para>
					Results:
				</para>
				
<programlisting>{
}
{
  "foo" : "bar"
}
</programlisting>
			</example>

		</section>
		
		 <section>
			<title>Default Decimal Format</title>
			 <para>
				This specifies a default decimal format for the builtin function format-number().
			</para>
			 <example>
				<title>A default decimal format setter.</title>
				 
<programlisting>
declare default decimal-format
    decimal-separator = ","
    grouping-separator = " ";
format-number(12345.67890, "# ###,##")
</programlisting>
				 <para>
					Results:
				</para>
				
<programlisting>"12 345,68"
</programlisting>
			</example>

		</section>
		

	</section>
	
	 <section>
		<title>Namespaces</title>
		 <para>
			Variables and functions live in namespaces that are URIs -- the semantics is similar to that of C++ namespaces. For convenience, namespaces are associated with a much shorter alias, and this alias can be used as a prefix to a variable or a function.
		</para>
		 <para>
			Until now, we only dealt with main queries. In main queries, the namespace alias <emphasis>local:</emphasis> is predefined so that global variables and functions that are local to the main query can use this alias, for example <emphasis>local:myvariable</emphasis> or <emphasis>local:myfunction()</emphasis>. This alias is associated with a namespace, but which namespace it is not relevant for writing queries.
		</para>
		 <para>
			For variables, the alias is optional -- variables not prefixed with an alias live in no namespace.
		</para>
		 <para>
			For functions, the absence of alias is only allowed for builtin functions. Builtin functions live in their own special namespace.
		</para>
		 <para>
			Other namespaces and aliases can be defined as well with imported library modules. This is defined in <xref linkend="chapter-modules" />.
		</para>

	</section>
	
	 <section id="section-globalVariables">
		<title>Global Variables</title>
		 <para>
			Variables can be declared global. Global variables are declared in the prolog.
		</para>
		 <example>
			<title>Global variable.</title>
			 
<programlisting>
declare variable $obj
  := { "foo" : "bar" };
declare variable $numbers
    := (1, 2, 3, 4, 5);
$obj,
[ $numbers ]
</programlisting>
			 <para>
				Results:
			</para>
			
<programlisting>{
  "foo" : "bar"
}
[ 1, 2, 3, 4, 5 ]
</programlisting>
		</example>
		 <para>
			You can specify a sequence type for a variable. If the type does not match, an error is raised. In general, you do not need to worry too much about variable types except if you want to make sure that what you bind to a variable is really what you want. In most cases, the engine will take care of types for you.
		</para>
		 <example>
			<title>Global variable with a type.</title>
			 
<programlisting>
declare variable $obj as object
  := { "foo" : "bar" };
$obj
</programlisting>
			 <para>
				Results:
			</para>
			
<programlisting>{
  "foo" : "bar"
}
</programlisting>
		</example>
		 <para>
			An external variable allows you to pass a value from the outside environment, which can be very useful. Each implementation can choose its own way of passing a value to an external variable. A default value for an external variable can also be supplied in case none is provided from outside.
		</para>
		 <example>
			<title>An external global variable with a default value.</title>
			 
<programlisting>
declare variable $obj external
  := { "foo" : "bar" };
$obj
</programlisting>
			 <para>
				Results:
			</para>
			
<programlisting>{
  "foo" : "bar"
}
</programlisting>
		</example>
		 <para>
			In these examples, global variables have no prefix. They can also be prefixed with the predefined alias <emphasis>local:</emphasis>, but them they must be prefixed both in the declaration and when used.
		</para>
		 <example>
			<title>An external global variable with the local: alias.</title>
			 
<programlisting>
declare variable $local:obj external := { "foo" : "bar" };
$local:obj
</programlisting>
			 <para>
				Results:
			</para>
			
<programlisting>{
  "foo" : "bar"
}
</programlisting>
		</example>
		 <para>
			Global variables that are imported from other modules are prefixed with the alias associated with the imported module, as will be explained in <xref linkend="chapter-modules" />.
		</para>

	</section>
	
	 <section>
		<title>User-Defined Functions</title>
		 <para>
			You can define your own functions in the prolog.
		</para>
		 <para>
			Unlike variables, user-defined functions must be prefixed, because unprefixed functions are the builtin functions.
		</para>
		 <para>
			In the prolog of a main query, these user-defined functions must be prefixed with the predefined alias <emphasis>local:</emphasis>, both in the declaration and when called.
		</para>
		 <para>
			Remember that types are optional, and if you do not specify any, <emphasis>item*</emphasis> is assumed, both for parameters and for the return type.
		</para>
		 <example>
			<title>Some user-defined functions.</title>
			 
<programlisting>
declare function local:say-hello-1($x)
{
  "Hello, " || $x || "!" 
};

declare function local:say-hello-2($x as string)
{
  "Hello, " || $x || "!"
};

declare function local:say-hello-3($x as string)
    as string
{
  "Hello, " || $x || "!"
};

local:say-hello-1("Mister Spock"),
local:say-hello-2("Mister Spock"),
local:say-hello-3("Mister Spock")
</programlisting>
			 <para>
				Results:
			</para>
			
<programlisting>"Hello, Mister Spock!"
"Hello, Mister Spock!"
"Hello, Mister Spock!"
</programlisting>
		</example>
		 <para>
			If you do specify types, an error is raised in case of a mismatch
		</para>
		 <example>
			<title>A type mismatch for a user-defined function (failing).</title>
			 
<programlisting>
declare function local:say-hello($x as string)
{
  "Hello, " || $x || "!"
}; 

local:say-hello(1)
</programlisting>
			 <para>
				Error:
			</para>
			
<programlisting>xs:integer can not be promoted to parameter type xs:string 
of function local:say-hello()</programlisting>
		</example>

	</section>

</chapter>

