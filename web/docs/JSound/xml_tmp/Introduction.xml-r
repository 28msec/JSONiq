<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JSound.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-Introduction">
	<title>Introduction</title>
  <para>
    Over the past decade, the need for more flexible and scalable databases has greatly increased. The NoSQL universe
    brings many new ideas on how to build both scalable data storage and scalable computing infrastructures.
  </para>
  <para>
    XML and JSON are probably the most popular two data formats which emerged. While XML reached a level of maturity
    which gives it an enterprise-ready status, JSON databases are still in their early stages. Scalable data stores
    (like MongoDB) are already available. JSONiq brings SQL-like query capabilities to JSON. The last missing piece
    for a full-fledged JSON database is a way to make sure that the data stored is consistent and sound. This is where
    schemas come into play.
  </para>
  <para>
    Many lessons can be learnt from 40 years of relational databases history and 15 years of XML. Just like JSONiq
    is inspired by SQL and XQuery, the goal of this document is to introduce a schema language, JSound, which is
    greatly inspired from its XML counterpart, XML Schema.
  </para>
  
	<section>
		<title>Requirements</title>
		<para>
      The JSound schema definition language is based on the following requirements:
		</para>
    <itemizedlist>
      <listitem>
        <para>
          A schema definition is a well-formed JSON document, in the sense that it parses against the JSON grammar.
        </para>
        <para>
          A schema definition is valid, in the sense that there is a JSound metaschema against which all
          schema definitions are valid.
        </para>
        <para>
          The types of the leaf values in a valid JSON document are based on <ulink
          url="http://www.w3.org/TR/xmlschema11-2/#built-in-datatypes">W3C XML Schema builtin
          atomic types</ulink>.
        </para>
        <para>
          It must be possible to mark string/value pairs in an object type as optional, and to specify a
          default value.
        </para>
        <para>
          While the schema definition language is greatly inspired from XML Schema, it must avoid its complexity.
        </para>
        <para>
          It should be possible, given a JSON document, to turn it into a schema against which it is valid with minimal
          changes.
        </para>
      </listitem>
    </itemizedlist>
	</section>

</chapter>
