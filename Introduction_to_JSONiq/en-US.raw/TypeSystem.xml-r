<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JSONiq.ent">
%BOOK_ENTITIES;
]>
<chapter id="chapter-type-system">
  <title>JSONiq types</title>
  <para>This section describes JSONiq types as well as the sequence type syntax.</para>
  <para>JSONiq manipulates semi-structured data: in general, JSONiq allows you, but does not require you to specify types. So you have as much or as little type verification as you wish.</para>
  <para>JSONiq is still strongly typed, so that you will be told if there is a type inconsistency or mismatch in your programs.</para>
  <para>Whenever you do not specify the type of a variable or the type signature of a function, the most general type for any sequence of items, item*, is assumed.</para>
  <para>Section <xref linkend="section-type-expressions"/> introduces expressions which work
with values of these types, as well as type operations (variable types, casts, ...).</para>
    <section>
      <title>Item types</title>
      <section>
        <title>Atomics</title>
        <figure>
          <title>AtomicOrUnionType</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/AtomicType.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Atomic types are organized in a tree hierarchy.</para>
        <para>JSONiq defines the following build-in types that have a direct relation with
        JSON:</para>
        <itemizedlist>
          <listitem>
            <para>
              <emphasis>string</emphasis>: the value space is all strings made of Unicode characters.
            </para>
            <para>All string literals build an atomic which matches string.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>integer</emphasis>: the value space is that of all mathematical integral
              numbers (N), with an infinite range. This is a subtype of <emphasis>decimal</emphasis>, so that all
              integers also match the item type <emphasis>decimal</emphasis>.</para>
            <para>All integer literals build an atomic which matches integer.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>decimal</emphasis>: the value space is that of all mathematical decimal
              numbers (D), with an infinite range. </para>
            <para>All decimal literals build an atomic which matches decimal.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>double</emphasis>: the value space is that of all IEEE double-precision 64-bit
              floating point numbers. </para>
            <para>All double literals build an atomic which matches double.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>boolean</emphasis>: the value space contains the booleans true and false.
            </para>
            <para>All boolean literals build an atomic which matches boolean.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>null</emphasis>: the value space is a singleton and only contains null.
            </para>
            <para>All null literals build an atomic which matches null.</para>
          </listitem>
          <listitem>
            <para>
              <emphasis>atomic</emphasis>: all atomic types.
            </para>
            <para>All literals build an atomic which matches atomic.</para>
          </listitem>
        </itemizedlist>
        <para>JSONiq also supports further atomic types, which were borrowed from <ulink url="http://www.w3.org/TR/xmlschema11-2/#built-in-datatypes">XML Schema</ulink>.</para>
        <para>These datatypes are already used as a set of atomic datatypes by the other two semi-structured data formats 
        of the Web: XML and RDF, as well as by the corresponding query languages: XQuery and SPARQL, so it is natural for a complete
        JSON data model to reuse them.</para>
        <itemizedlist>
          <listitem>
            <para>Further number types: long, int, short, byte, float.</para>
          </listitem>
          <listitem>
            <para>Date or time types: date, dateTime, dateTimeStamp, gDay, gMonth, gMonthDay, gYear, gYearMonth, time.</para>
          </listitem>
          <listitem>
            <para>Duration types: duration, dayTimeDuration, yearMonthDuration.</para>
          </listitem>
          <listitem>
            <para>Binary types: base64Binary, hexBinary.</para>
          </listitem>
          <listitem>
            <para>An URI type: anyURI.</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>JSON items</title>
        <figure>
          <title>JSONItemTest</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/JSONItemTest.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>All objects match the item type <emphasis>object</emphasis> as well as <emphasis>json-item</emphasis>.</para>
        <para>All arrays match the item type <emphasis>array</emphasis> as well as <emphasis>json-item</emphasis>.</para>
      </section>
    <section>
      <title>The most general item type.</title>
      <para>All items match the item type <emphasis>item</emphasis>.</para>
      <figure>
        <title>ItemType</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ItemType.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section>
      <title>Sequence types</title>
      <figure>
        <title>SequenceType</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/SequenceType.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>A sequence is an ordered list of items.</para>
      <para>All sequences match the sequence type <emphasis>item*</emphasis>.</para>
      <para>A sequence type is made of an item type followed by an occurrence indicator:</para>
      <itemizedlist>
      <listitem>
         <para>* stands for a sequence of any length (zero or more)</para>
      </listitem>
      <listitem>
         <para>+ stands for a non-empty sequence (one or more)</para>
      </listitem>
      <listitem>
        <para>? stands for an empty or a singleton sequence (zero or one)</para>
      </listitem>
      <listitem>
        <para>The absence of indicator stands for a singleton sequence (one).</para>
      </listitem>
    </itemizedlist>
    <para>Examples:</para>
    <itemizedlist>
      <listitem>
        <para>string matches any singleton sequence containing a string.</para>
      </listitem>
      <listitem>
        <para>item+ matches any non-empty sequence.</para>
      </listitem>
      <listitem>
        <para>object? matches the empty sequence and any sequence containing one object.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
