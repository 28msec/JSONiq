<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JSONiq.ent">
%BOOK_ENTITIES;
]>
<chapter id="chapter-functions">
  <title>Function Library</title>
  <para>JSONiq provides a rich set of functions.</para>
  <section>
    <title>JSON specific functions.</title>
    <para>Some functions are specific to JSON.</para>
    <section>
      <title>keys</title>
      <para>
        This function returns the distinct keys of all objects in the supplied sequence, in an implementation-dependent order.
      </para>
      <para>
        <code>keys($o as item*) as string*</code>
      </para>
      <example>
        <title>Getting all distinct key names in the supplied objects, ignoring non-objects.</title>
        <programlisting>
let $o := ("foo", [ 1, 2, 3 ], { "a" : 1, "b" : 2 }, { "a" : 3, "c" : 4 })
return keys($o)
        </programlisting>
      </example>
      <example>
        <title>Retrieving all Pairs from an Object:</title>
        <programlisting>
let $map := { "eyes" : "blue", "hair" : "fuchsia" }
for $key in keys($map)
return { $key : $map.$key }
        </programlisting>
      </example>
    </section>
    <section>
      <title>members</title>
      <para>This functions returns all members of all arrays of the supplied sequence.</para>
      <para>
        <code>members($a as item*) as item*</code>
      </para>
      <example>
        <title>Retrieving the members of all supplied arrays, ignoring non-arrays.</title>
        <programlisting>
let $planets :=  ( "foo", { "foo" : "bar "}, [ "mercury", "venus", "earth", "mars" ], [ 1, 2, 3 ])
return members($planets)
        </programlisting>
      </example>
    </section>
    <section>
      <title>null</title>
      <para>
        This function returns the JSON null.
      </para>
      <para>
        <code>null() as null</code>
      </para>
    </section>
    <section>
      <title>parse-json</title>
      <para> This function parses its first parameter (a string) as JSON, and returns the resulting
        sequence of objects and arrays. </para>
      <para>
        <code>parse-json($arg as string?) as json-item*</code>
      </para>
      <para>
        <code>parse-json($arg as string?, $options as object) as json-item*</code>
      </para>
      <para>The object optionally supplied as the second parameter may contain additional options:</para>
      <itemizedlist>
        <listitem>
          <para><code>jsoniq-multiple-top-level-items</code> (boolean): indicates whether parsing to zero, or several objects is allowed.
          An error is raised if this value is false and there is not exactly one object that was parsed.</para>
        </listitem>
      </itemizedlist>
      <para>
        If parsing is not successful, an error is raised. Parsing is considered in particular to be non-successful if
        the boolean associated with "jsoniq-multiple-top-level-items" in the additional parameters is false and there is
        extra content after parsing a single abject or array.
      </para>
      <example>
        <title>Parsing a JSON document</title>
        <programlisting>
parse-json("{ \"foo\" : \"bar\" }", { "jsoniq-multiple-top-level-items" : false })
        </programlisting>
      </example>
      <example>
        <title>Parsing multiple, whitespace-separated JSON documents</title>
        <programlisting>
parse-json("{ \"foo\" : \"bar\" } { \"bar\" : \"foo\" }")
        </programlisting>
      </example>
    </section>
    <section>
      <title>size</title>
      <para>
        This function returns the size of the supplied array, or the empty sequence if the empty sequence is provided.
      </para>
      <para>
        <code>size($a as array?) as integer?</code>
      </para>
      <example>
        <title>Retrieving the size of an array</title>
        <programlisting>
let $a := [1 to 10]
return size($a)
        </programlisting>
      </example>
    </section>
    <section>
      <title>accumulate</title>
      <para> This function dynamically builds an object, like the {| |} syntax, except that it does not throw
        an error upon pair collision. Instead, it accumulates them, wrapping into an array if necessary. Non-objects are ignored.</para>
      <programlisting>
declare function accumulate($seq as item*) as object
{
  {|
    keys($seq) ! { $$ : $seq.$$ }
  |}
};
      </programlisting>
    </section>
    <section>
      <title>descendant-arrays</title>
      <para> This function returns all arrays contained within the supplied items, regardless of depth.</para>
      <programlisting>
declare function descendant-arrays($seq as item*) as array*
{
  for $i in $seq
  return typeswitch ($i)
  case array return ($i, descendant-arrays($i[])
  case object return return descendant-arrays(values($i))
  default return ()
};
      </programlisting>
    </section>
    <section>
      <title>descendant-objects</title>
      <para> This function returns all objects contained within the supplied items, regardless of depth.</para>
      <programlisting>
declare function descendant-objects($seq as item*) as object*
{
  for $i in $seq
  return typeswitch ($i)
  case object return ($i, descendant-objects(values($i)))
  case array return return descendant-objects($i[])
  default return ()
};
      </programlisting>
    </section>
    <section>
      <title>descendant-pairs</title>
      <para>
        This function returns all descendant pairs within the supplied items.
      </para>
      <programlisting>
declare function descendant-pairs($seq as item*)
{
  for $i in $seq
  return typeswitch ($i)
  case object return
    for $k in keys($o)
    let $v := $o.$k
    return ({ $k : $v }, descendant-pairs($v))
  case array return descendant-pairs($i[])
  default return ()
};
      </programlisting>
      <example>
        <title>Accessing all descendant pairs</title>
        <programlisting>
let $o := 
{
  "first" : 1,
  "second" : { 
    "first" : "a", 
    "second" : "b" 
  }
}
return descendant-pairs($o)
        </programlisting>
      </example>
    </section>
    <section>
      <title>flatten</title>
      <para>This function recursively flattens arrays in the input sequence, leaving non-arrays intact.</para>
      <programlisting>
declare function flatten($seq as item*) as item*
{
  for $value in $seq
  return typeswitch ($value)
         case array return flatten($value[])
         default return $value
};
	  </programlisting>
    </section>
    <section>
      <title>intersect</title>
      <para>This function returns the intersection of the supplied objects, and aggregates values corresponding
        to the same name into an array. Non-objects are ignored.</para>
      <programlisting>
declare function intersect($seq as item*)
{
  {|
    let $objects := $seq[. instance of object()]
    for $key in keys(head($objects))
    where every $object in tail($objects)
          satisfies exists(index-of(keys($object), $key))
    return { $key : $objects.$key }
  |}
};
      </programlisting>
    </section>
    <section>
      <title>project</title>
      <para>This function iterates on the input sequence. It projects objects by filtering their pairs and leaves non-objects intact.</para>
      <programlisting>
declare function project($seq as item*, $keys as string*) as item*
{
  for $item in $seq
  return typeswitch ($item)
         case $object as object return
         {|
           for $key in keys($object)
           where some $to-project in $keys satisfies $to-project eq $key
           let $value := $object.$key
           return { $key : $value }
         |}
         default return $item
};
      </programlisting>
      <example>
        <title>Projecting an object 1</title>
        <programlisting>
let $o := {
  "Captain" : "Kirk",
  "First Officer" : "Spock",
  "Engineer" : "Scott"
  }
return project($o, ("Captain", "First Officer"))
        </programlisting>
      </example>
      <example>
        <title>Projecting an object 2</title>
        <programlisting>
let $o := {
  "Captain" : "Kirk",
  "First Officer" : "Spock",
  "Engineer" : "Scott"
  }
return project($o, "XQuery Evangelist")
        </programlisting>
      </example>
    </section>
    <section>
      <title>remove-keys</title>
      <para>This function iterates on the input sequence. It removes the pairs with the given keys from all objects and leaves non-objects intact.</para>
      <programlisting>
declare function remove-keys($seq as item*, $keys as string*) as item*
{
  for $item in $seq
  return typeswitch ($item)
         case $object as object return
         {|
           for $key in keys($object)
           where every $to-remove in $keys satisfies $to-remove ne $key
           let $value := $object.$key
           return { $key : $value }
         |}
         default return $item
};
      </programlisting>
      <example>
        <title>Removing keys from an object (not implemented yet)</title>
        <programlisting>
let $o := {
  "Captain" : "Kirk",
  "First Officer" : "Spock",
  "Engineer" : "Scott"
  }
return remove-keys($o, ("Captain", "First Officer"))
        </programlisting>
      </example>
    </section>
    <section>
      <title>values</title>
      <para>This function returns all values in the supplied objects. Non-objects are ignored.</para>
      <programlisting>
declare function values($seq as item*) as item* {
  for $i in $seq
  for $k in jn:keys($i)
  return $i($k)
};
      </programlisting>
    </section>
    <section>
      <title>encode-for-roundtrip</title>
      <para>
        This function encodes any sequence of items, even containing non-JSON types, to a sequence of JSON items that can be serialized as pure JSON, in a way that it can be
        parsed and decoded back using decode-from-roundtrip. JSON features are left intact, while atomic items annotated with a non-JSON type are converted to objects embedding all necessary information.
      </para>
      <para>
        <code>encode-for-roundtrip($items as item*) as json-item*</code>
      </para>
    </section>
    <section>
      <title>decode-from-roundtrip</title>
      <para>
        This function decodes a sequence previously encoded with encode-for-roundtrip.
      </para>
      <para>
        <code>decode-from-roundtrip($items as json-item*) as item*</code>
      </para>
    </section>
  </section>
  <section>
    <title>Functions taken from XQuery</title>
    <itemizedlist>
      <listitem>
        <para>Access to the external environment: collection#1</para>
      </listitem>
      <listitem>
        <para>Function to turn atomics into booleans for use in two-valued logics: boolean#1</para>
      </listitem>
      <listitem>
        <para>Raising errors: error#0, error#1, error#2, error#3.</para>
      </listitem>
      <listitem>
        <para>Functions on numeric values: abs#1, ceilingabs#1, floorabs#1, roundabs#1, round-half-to-even#1</para>
      </listitem>
      <listitem>
        <para>Parsing numbers: number#0, number#1</para>
      </listitem>
      <listitem>
        <para>Formatting integers: format-integer#2, format-integer#3</para>
      </listitem>
      <listitem>
        <para>Formatting numbers: format-number#2, format-number#3</para>
      </listitem>
      <listitem>
        <para>Trigonometric and exponential functions: pi#0, exp#1, exp10#1, log#1, log10#1, pow#2, sqrt#1, sin#1, cos#1, tan#1, asin#1, acos#1, atan#1, atan2#1</para>
      </listitem>
      <listitem>
        <para>Functions to assemble and disassemble strings: codepoints-to-string#1, string-to-codepoints#1</para>
      </listitem>
      <listitem>
        <para>Comparison of strings: compare#2, compare#3, codepoint-equal#2</para>
      </listitem>
      <listitem>
        <para>Functions on string values: concat#2, string-join#1, string-join#2, substring#2, substring#3, string-length#0, string-length#1, normalize-space#0, normalize-space#1, normalize-unicode#1, normalize-unicode#2, upper-case#1, lower-case#1, translate#3</para>
      </listitem>
      <listitem>
        <para>Functions based on substring matching: contains#2, contains#3, starts-with#2, starts-with#3, ends-with#2, ends-with#3, substring-before#2, substring-before#3, substring-after#2, substring-after#3</para>
      </listitem>
      <listitem>
        <para>String functions that use regular expressions: matches#2, matches#3, replace#3, replace#4, tokenize#2, tokenize#3</para>
      </listitem>
      <listitem>
        <para>Functions that manipulate URIs: resolve-uri#1, resolve-uri#2, encode-for-uri#1, iri-to-uri#1, escape-html-uri#1</para>
      </listitem>
      <listitem>
        <para>General functions on sequences:  empty#1, exists#1, head#1, tail#1, insert-before#3, remove#2, reverse#1, subsequence#2,  subsequence#3, unordered#1</para>
      </listitem>
      <listitem>
        <para>Function that compare values in sequences: distinct-values#1, distinct-values#2, index-of#2, index-of#3, deep-equal#2. deep-equal#3</para>
      </listitem>
      <listitem>
        <para>Functions that test the cardinality of sequences: zero-or-one#1, one-or-more#1, exactly-one#1</para>
      </listitem>
      <listitem>
        <para>Aggregate functions: count#1, avg#1, max#1, min#1, sum#1</para>
      </listitem>
      <listitem>
        <para>Serializing functions: serialize#1 (unary)</para>
      </listitem>
      <listitem>
        <para>Context information: current-dateTime#1, current-date#1, current-time#1, implicit-timezone#1, default-collation#1</para>
      </listitem>
      <listitem>
        <para>Constructor functions: for all builtin types, with the name of the builtin type and unary. Equivalent to a cast expression.</para>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
