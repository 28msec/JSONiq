/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

// ONLY EDIT THIS FILE IN THE GRAMMAR ROOT DIRECTORY!
// THE ONE IN THE ${spec}-src DIRECTORY IS A COPY!!!

public class SimpleNode implements Node {
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
  	if(n == this)
  	{
  		throw new RuntimeException("A parent can't parent itself! "+((SimpleNode)n));
//  		System.err.println("A parent can't parent itself! "+((SimpleNode)n));
//  		return;
  	}
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  /** Accept the visitor. **/
  public Object jjtAccept(XPathVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(XPathVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return Parser.yyname[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    dump(prefix, System.out);
  }
  
public void dump(String prefix, java.io.PrintStream ps) {
    ps.print(toString(prefix));
    printValue(ps);
    ps.println();
    if (children != null) {
        for (int i = 0; i < children.length; ++i) {
            SimpleNode n = (SimpleNode) children[i];
            if(n == this){
            	throw new RuntimeException("Found child that is it's own parent!");
            }
            if (n != null) {
                n.dump(prefix + "   ", ps);
            }
        }
    }
}


// Manually inserted code begins here

  protected Object m_value;
  // public void processToken(Token t) { m_value = t.image; }

  public void printValue(java.io.PrintStream ps)
  {
    if(null != m_value)
      ps.print(" "+m_value);
  }

}

