<!--XSLT Processor: SAXON 8.9.0.4 from Saxonica SAXON SA 8.9.0.4--><!--XSLT Processor: SAXON 8.9.0.4 from Saxonica SAXON SA 8.9.0.4--><spec xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" id="spec-top" w3c-doctype="wd"><header id="spec-header"><title>XQuery Scripting Extension 1.0</title><w3c-designation>WD-xquery-sx-10</w3c-designation><w3c-doctype>W3C Working Draft</w3c-doctype><pubdate><day>8</day><month>April</month><year>2010</year></pubdate><publoc>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2010/WD-xquery-sx-10-20100408" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2010/WD-xquery-sx-10-20100408</loc>
    </publoc><latestloc>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-sx-10/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xquery-sx-10/</loc>
    </latestloc><prevlocs>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2008/WD-xquery-sx-10-20081203/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2008/WD-xquery-sx-10-20080328/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
		</prevlocs><authlist><author><name><phrase><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://snelson.org.uk/john" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">John Snelson</loc></phrase></name><affiliation>Oracle Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:john.snelson@oracle.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">john.snelson@oracle.com</email></author><author><name>Don Chamberlin</name><affiliation>IBM Almaden Research Center</affiliation><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.almaden.ibm.com/cs/people/chamberlin/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"> http://www.almaden.ibm.com/cs/people/chamberlin/</loc></author><author><name>Daniel Engovatov</name><affiliation>W3C invited expert</affiliation><!--         <email href="mailto:dengovatov@bea.com">dengovatov@bea.com</email> --></author><author><name>Dana Florescu</name><affiliation>Oracle Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:dana.florescu@oracle.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">dana.florescu@oracle.com</email></author><author><name>Giorgio Ghelli</name><affiliation>University of Pisa</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:ghelli@di.unipi.it" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">ghelli@di.unipi.it</email></author><author><name>Jim Melton</name><affiliation>Oracle Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:jim.melton@acm.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">jim.melton@acm.org</email></author><author><name>Jérôme Siméon</name><affiliation>IBM T.J. Watson Research Center</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:simeon@us.ibm.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">simeon@us.ibm.com</email></author></authlist><!--* Common status section for QT specs.
    * Use is currently not required, but it simplifies things.
    * 
    * Revisions:
    * 2007-01-15 : CMSMcQ : made file, to simplify publication of Rec.
    * 2008-02-15 : JimMelton : cloned from MSM's REC-only material
                     to generalize for all stages
    *--><status id="status"><!-- ************************************************************************** --><!-- * All Status sections must start with the standard boilerplate paragraph * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p><emph>This section describes the status of this
         document at the time of its publication.
         Other documents may supersede this document.
         A list of current W3C publications and the latest
         revision of this technical report can be found in the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C technical reports index</loc>
         at http://www.w3.org/TR/.</emph></p><!-- ************************************************************************** --><!-- * QT publishes suites of documents, which must be described in the       * --><!--     Status section of each document within such a suite.                 * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * There is a lot of detailed customization based on the document stage   * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#maturity-levels" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Working Draft</loc> as described in the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Process Document</loc>.
It has been developed by the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc>,
which is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Activity" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Activity</loc>.
The Working Group expects to advance this specification to <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsW3C" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Recommendation</loc> Status.</p><!-- ************************************************************************** --><!-- * CR documents must cite features at risk                                * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * Every Status section must have a customized paragraph                  * --><!-- *   This entity is defined completely in the host document.              * --><!-- ************************************************************************** --><p>This is the last version of XQuery Scripting Extension that
is aligned with XQuery Update Facility 1.0.  In future versions of this document, the Working Group
intends to reposition XQuery Scripting Extension 1.0 against the <bibref ref="XQ11"/> set of
specifications, and remove it from the <bibref ref="XQ10"/> publication track.</p><!-- ************************************************************************** --><!-- * CR docs should, and PR docs must, have a pointer to an implementation  * --><!-- *   report.  We also want to point to the test suite.                    * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>No implementation report currently exists.
However, a Test Suite for XQuery Scripting Extension 1.0 is under development.</p><!-- ************************************************************************** --><!-- * The Status section should point to a changelog                         * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This document incorporates changes made against the previous publication
  of the Working Draft of 3 December 2008.
  Changes to this document since the previous publication of the Working Draft
  are detailed in <specref ref="id-revisions-log"/>.</p><!-- ************************************************************************** --><!-- * The Status section must tell readers where to send comments            * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>Please report errors in this document using W3C's
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public Bugzilla system</loc>
         (instructions can be found at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/2005/04/qt-bugzilla" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/XML/2005/04/qt-bugzilla</loc>).
         If access to that system is not feasible, you may send your comments
         to the W3C XSLT/XPath/XQuery public comments mailing list,
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-qt-comments@w3.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public-qt-comments@w3.org</loc>.
         It will be very helpful if you include the string 
         “[SX]”
         in the subject line of your report, whether made in Bugzilla or in email.
         Please use multiple Bugzilla entries (or, if necessary, multiple email messages)
         if you have more than one comment to make.
         Archives of the comments and responses are available at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Public/public-qt-comments/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://lists.w3.org/Archives/Public/public-qt-comments/</loc>. </p><!-- ************************************************************************** --><!-- Status sections must state the stability (not stable, or REC) of the document --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>Publication as a Working Draft
does not imply endorsement by the W3C Membership. 
This is a draft document and may be updated, replaced or obsoleted
by other documents at any time. 
It is inappropriate to cite this document as other than work in progress.</p><!-- ************************************************************************** --><!-- * Finally, all Status sections must end with the appropriate IPR para    * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>This document was produced by a group operating under the
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">5 February 2004
  W3C Patent Policy</loc>.
  W3C maintains a 
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2004/01/pp-impl/18797/status#disclosures" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any patent disclosures</loc>
  made in connection with the deliverables of the group; 
  that page also includes instructions for disclosing a patent.
  An individual who has actual knowledge of a patent 
  which the individual believes contains
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Essential Claim(s)</loc>
  must disclose the information in accordance with
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
  section 6 of the W3C Patent Policy</loc>. </p></status><abstract><p>This specification defines an extension to <bibref ref="XQ10"/>
         and <bibref ref="XQueryUpdate"/>. 
         Expressions can be evaluated in a specific order,
         with later expressions seeing the effects of the expressions that came before them. 
         This specification introduces several new kinds of expression, including the apply,
         assignment, while, and exit expression, and a block expression with local variable declarations.
      </p></abstract><langusage><language id="en">English</language></langusage><revisiondesc id="id-revision-log"><p>Engovatov, 23 Sept 2007.  Initial draft.</p><p>Chamberlin, 27 Sept 2007.  Made some changes to syntax and terminology. Added an example.</p><p>Chamberlin, 5 Dec 2007. Revised proposal according to "semicolon operator" proposal by John Snelson,
         approved in WG telcon 347.</p><p>Melton, 11 Feb 2008. Added XQueryX material.</p><p>Melton, 14 Mar 2008. Revised Abstract per telecon 2008-03-11, updated XQueryX material to align with grammar.</p><p>Snelson, 10 July 2008. Revised according to "mixing PUL and XDM" proposal approved in WG face-to-face 372.</p><p>Snelson, 10 July 2008. Implemented Michael Dyck's proposal for a SequenceType re-check after upd:applyUpdates approved in WG telcon 359.</p><p>Snelson, 10 July 2008. Implemented block proposal approved in WG face-to-face 362.</p><p>Snelson, 28 Oct 2008. Removed break/continue according to decision in WG face-to-face 381.</p><p>Snelson, 28 Oct 2008. Added ApplyExpr and remove semicolon from BlockExpr according to decision in WG face-to-face 381.</p><p>Snelson, 9 Nov 2008. Added the ability to modify parameters to sequential functions according to decision in WG face-to-face 381.</p><p>Snelson, 14 May 2009. Removed restrictions on placement of sequential expressions according to decision in WG telcon 403.</p></revisiondesc></header><body><div1 id="Introduction"><head>Introduction</head><p>XQuery Scripting Extension extends <bibref ref="XQ10"/>, enabling it to
         serve as a scripting language in order to satisfy <bibref ref="ScriptingRequirements"/>. 
         A prerequisite for this extension is <bibref ref="XQueryUpdate"/>. 
         The following abbreviations are used in this specification: 
         <termdef term="XQUF" id="dt-xquf"><term>XQUF</term> is an abbreviation for <bibref ref="XQueryUpdate"/>.</termdef>
         <termdef term="XQSX" id="dt-xqsx"><term>XQSX</term> is an abbreviation for XQuery Scripting Extension.</termdef></p><p>In this document, examples and material labeled as <quote>Note</quote> are provided for
         explanatory purposes and are not normative. </p><p><termref def="dt-xqsx">XQSX</termref> has the following properties:</p><ulist><item><p>It is a strict superset of <termref def="dt-xquf">XQUF</termref>, in the
             sense that all valid <termref def="dt-xquf">XQUF</termref> expressions are also
             valid <termref def="dt-xqsx">XQSX</termref> expressions and have the same meaning. 
             (In the same sense, <termref def="dt-xquf">XQUF</termref> is a strict
             superset of <bibref ref="XQ10"/>.)</p></item><item><p>It does not introduce any "modes" that affect the semantics of expressions.</p></item><item><p>As in <termref def="dt-xquf">XQUF</termref>, the result of an expression
             consists of an <termref def="dt-xdm-instance">XDM instance</termref> and a
             <termref def="dt-pul">pending update list</termref>.
             <termdef term="XDM instance" id="dt-xdm-instance">An <term>XDM instance</term>
             is an unconstrained sequence of zero or more nodes and/or atomic values,
             as defined in <bibref ref="XDM"/>.</termdef>
             <termdef term="pending update list" id="dt-pul">A <term>pending update list</term>
             is an unordered collection of update primitives, representing node state changes
             that have not yet been applied, as defined in <bibref ref="XQueryUpdate"/>.</termdef></p></item></ulist></div1><div1 id="id-extensions-to-processing-model"><head>Extensions to the Processing Model</head><p>
          Expressions in XQSX may have side-effects that are visible to subsequent expressions (according to their
          <termref def="dt-eval-order">evaluation order</termref>). This requires a number of extensions to the 
          <bibref ref="XQ10"/>and <bibref ref="XQueryUpdate"/> processing model.
        </p><div2 id="id-evaluation-order"><head>Evaluation Order</head><p>
          <termdef term="evaluation order" id="dt-eval-order"><termref def="dt-xqsx">XQSX</termref> defines an <term>evaluation order</term> on
          many kinds of XQuery expressions, which is the order that operand expressions must be evaluated in order
          to determine what side-effects are visible to later expressions.</termdef>
          An implementation may use any execution strategy as long as the result complies with
          the semantics of this ordering.</p><note><p>Since none of the XQuery expressions existing before
             <termref def="dt-xqsx">XQSX</termref> has any immediate side-effects,
             no ordering is effectively imposed on the evaluation of any expression
             unless it contains one of the new <phrase diff="add">sequential</phrase> expressions introduced by <termref def="dt-xqsx">XQSX</termref>.</p></note></div2><div2 id="id-snapshot-scope"><head>Snapshot <phrase diff="add">and Execution</phrase> Scope</head><p>The term <term>snapshot</term> is defined in <bibref ref="XQueryUpdate"/> as follows:
           <termdef term="snapshot" id="dt-snapshot">A <term>snapshot</term> is a scope
           within which expressions are evaluated with respect to a fixed
           <termref def="dt-xdm-instance">XDM instance</termref> and updates are held pending.</termdef>
           A snapshot is terminated by invocation of the <code>upd:applyUpdates</code> operation.
           Unlike <termref def="dt-xquf">XQUF</termref>, <termref def="dt-xqsx">XQSX</termref>
           permits a query to contain more than one snapshot.</p><p diff="add">
          <bibref ref="FO"/> defines certain functions as <xtermref spec="FO" ref="stable">stable</xtermref>. Stable functions
          such as <code>fn:current-time</code> and <code>fn:doc</code> are defined to return the same result given the same
          arguments within an <xtermref spec="FO" ref="execution-scope">execution scope</xtermref>. <termref def="dt-xqsx">XQSX</termref>
          redefines the extent of an execution scope, so that a top level query can contain many execution scopes.
        </p><p>In XQSX, each of the following expressions is <phrase diff="add">both</phrase> a snapshot <phrase diff="add">and execution scope</phrase>:
           <ulist><item><p>each ConcatExpr within an ApplyExpr</p></item><item><p>each initialization expression in a BlockVarDecl</p></item><item><p>the expression on the right-hand side of an AssignmentExpr</p></item><item><p>the expression in an ExitExpr</p></item><item><p>the test expression in a WhileExpr</p></item></ulist>
        </p></div2><div2 id="id-variable-revalidation"><head>Variable Binding Revalidation</head><p>
          To ensure type soundness, variable bindings are revalidated at the end of each scope to check that
          any updates applied have not made them invalid with repect to their declared types. It is a dynamic
          error <errorref code="0003" class="DY"/> if, after applying a pending update list (using <code>upd:applyUpdates</code>),
          the XDM instance bound to any in-scope variable does not match the static type of that variable according
          to SequenceType matching rules.
        </p></div2><div2 id="id-updating-constraint"><head>Updating Expression Constraints</head><p>
            <termref def="dt-xqsx">XQSX</termref> relaxes the constraints on the placement of 
            <termref def="dt-updating-expr">updating expressions</termref>, so that a non-empty
            <termref def="dt-xdm-instance">XDM instance</termref> can be returned by an expression
            as well as a non-empty <termref def="dt-pul">pending update list</termref>. In order to allow
            this, new rules to determine the category and resulting <termref def="dt-pul">pending update list</termref>
            are added to every existing expression, following certain principles:
        </p><ulist><item><p>
              An <termref def="dt-updating-expr">updating expression</termref> is allowed anywhere a
              <termref def="dt-simple-expr">simple expression</termref> is allowed. If an operand of an expression is an
              <termref def="dt-updating-expr">updating expression</termref>, the expression itself is
              an <termref def="dt-updating-expr">updating expression</termref>.
            </p></item><item><p>
              An expression may not be both <termref def="dt-sequential-expr">sequential</termref> and
              <termref def="dt-updating-expr">updating</termref>. If an <termref def="dt-updating-expr">updating</termref>
              expression contains or uses a <termref def="dt-sequential-expr">sequential expression</termref>
              (or vice versa), an error is raised <errorref code="0002" class="ST"/>.
            </p></item><item><p>
              The <termref def="dt-pul">pending update list</termref> that results from any given expression is the result of
              calling <code>upd:mergeUpdates</code> on the <termref def="dt-pul">pending update lists</termref> from the result
              of all of its operand expressions. No <termref def="dt-pul">pending update list</termref> is ever discarded.
              <!-- TBD add the try-catch comment back in when XQSX has try-catch - jpcs -->
              <!-- except specifically by the try-catch expression. -->
            </p></item></ulist></div2><div2 id="id-sequential"><head>Sequential Expressions</head><p>
            <termref def="dt-xqsx">XQSX</termref> introduces a new expression category called
            <termref def="dt-sequential-expr">sequential expressions</termref>. 
            The simple and updating expression categories introduced by <termref def="dt-xquf">XQUF</termref>
            are retained, but the vacuous expression category no longer has significance. 
            Informal definitions of all the expression categories are summarized here. 
            For normative definitions of the categories, see the "Category Rules"
            that are specified for each kind of expression in <specref ref="id-new-exprs"/>
            and <specref ref="id-existing-exprs"/>.</p><olist><item><p>
                <termdef id="dt-updating-expr" term="updating expression">An <term>updating expression</term>
                is an expression that can return a non-empty <termref def="dt-pul">pending update list</termref>.</termdef>
                Updating expressions include insert, delete, replace, rename, and calls to
                updating functions, as well as certain other expressions that contain nested updating expressions. 

                An updating expression may return a non-empty <termref def="dt-xdm-instance">XDM instance</termref>
                as well as a non-empty <termref def="dt-pul">pending update list</termref> - however note that
                it does not actually apply any updates.</p></item><item><p>
                <termdef term="sequential expression" id="dt-sequential-expr">A <term>sequential expression</term>
                is an expression that can have side effects other than constructing a new node or raising an error.</termdef>
                Side effects include applying updates to an <termref def="dt-xdm-instance">XDM instance</termref>,
                altering the dynamic context, or affecting the flow of control. 
                Sequential expressions include apply expressions, assignment, exit, while,
                and calls to sequential functions, as well as certain other expressions that
                contain nested sequential expressions. 
                The side effects of a sequential expression are immediately effective
                and are visible to subsequent expressions. 
                Because of their side effects, sequential expressions must be evaluated
                in a well-defined order. 
                In addition to its side effects, a sequential expression may return
                a non-empty <termref def="dt-xdm-instance">XDM instance</termref>,
                but it never returns a non-empty <termref def="dt-pul">pending update list</termref>.</p></item><item><p>
                <termdef term="simple expression" id="dt-simple-expr">A <term>simple expression</term>
                is an expression that is neither an <termref def="dt-updating-expr">updating expression</termref>
                nor a <termref def="dt-sequential-expr">sequential expression</termref>.</termdef>
                A simple expression may return an <termref def="dt-xdm-instance">XDM instance</termref>,
                and it may construct a node or raise an error.</p></item></olist><p>The classification of each expression into one of the above categories is
             performed by static analysis. 
             For each kind of expression, <termref def="dt-xqsx">XQSX</termref>
             provides rules that specify the required categories of the operand expressions
             and the category of the expression itself.</p><p>
         Note that <termref def="dt-simple-expr">simple expressions</termref>, <termref def="dt-updating-expr">updating expressions</termref>, and
         <termref def="dt-sequential-expr">sequential expressions</termref>
         are disjoint categories.
         The kinds of values that can be returned by the various expression categories
         are summarized in the following table:</p><table border="1"><tbody><tr><th align="center" rowspan="1" colspan="1">
              <emph>Expression category</emph>
            </th><th align="center" rowspan="1" colspan="1">
              <emph>Can return non-empty XDM instance?</emph>
            </th><th align="center" rowspan="1" colspan="1">
              <emph>Can return non-empty PUL?</emph>
            </th><th align="center" rowspan="1" colspan="1">
              <emph>Can have immediate side-effects?</emph>
            </th></tr><tr><td align="center" rowspan="1" colspan="1">Simple</td><td align="center" rowspan="1" colspan="1">YES</td><td align="center" rowspan="1" colspan="1">NO</td><td align="center" rowspan="1" colspan="1">NO</td></tr><tr><td align="center" rowspan="1" colspan="1">Updating</td><td align="center" rowspan="1" colspan="1">YES</td><td align="center" rowspan="1" colspan="1">YES</td><td align="center" rowspan="1" colspan="1">NO</td></tr><tr><td align="center" rowspan="1" colspan="1">Sequential</td><td align="center" rowspan="1" colspan="1">YES</td><td align="center" rowspan="1" colspan="1">NO</td><td align="center" rowspan="1" colspan="1">YES</td></tr></tbody></table></div2></div1><div1 id="id-extensions-to-static-context"><head>Extensions to the Static Context</head><div2 id="id-namespace"><head>Predefined Namespace</head><p>
          <termref def="dt-xqsx">XQSX</termref> adds the pair (<code>xqsx</code>, <code>http://www.w3.org/2008/xquery-sx-10</code>) as a predefined
          namespace to the statically known namespaces.
        </p></div2><div2 id="id-query-mode"><head>Query Mode</head><p>
          <termdef term="query mode" id="dt-query-mode">The <term>query mode</term> governs the composability of
          <termref def="dt-updating-expr">updating</termref> and <termref def="dt-sequential-expr">sequential expressions</termref>.
          Valid values are <code>sequential</code> and <code>simple</code>.</termdef>
          The default initial value of query mode is <code>sequential</code>, but it can be overwritten by an implementation. Query mode
          has a lexical scope, and can be modified at both the module and expression level.
        </p><p>
          In particular, query mode affects the category rules for 
          <specref ref="id-path-expr"/>, <specref ref="id-predicate"/>, <specref ref="id-FLWOR-expr"/>, and <specref ref="id-quantified-expr"/>.
        </p></div2></div1><div1 id="id-extensions-to-prolog"><head>Extensions to the Prolog</head><div2 id="id-assignable-global-var"><head>Assignable Global Variables</head><scrap headstyle="show"><head/><prod num="24" id="doc-xquery-VarDecl"><lhs>VarDecl</lhs><rhs>"declare"  ("unassignable"?  |  "assignable")  "variable"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)  |  "external")</rhs></prod></scrap><p diff="add">
            <termref def="dt-xqsx">XQSX</termref> allows the qualifiers <code>assignable</code> and <code>unassignable</code>
            to be used in a Prolog variable declaration.
            <termdef term="assignable" id="dt-assignable">Prolog variables declared as <term>assignable</term> may have their
            value changed by an <specref ref="id-assignment"/>.</termdef>
            If an assignment qualifier is not used, the default is <code>unassignable</code>.
          </p><p diff="del">
           <termdef term="constant" id="dt-constant">
           <termref def="dt-xqsx">XQSX</termref> allows the keyword <code>constant</code>
           to be used in place of <code>variable</code> in a Prolog declaration. 
           A variable declared in this way is called a <term>constant</term>.</termdef>
         </p><p diff="add">The semantics of assignable variables are the same as the semantics of unassignable variables, except that
          the static type of an assignable variable without a declared type is always <code>item()*</code>.
           </p><p diff="del">Rules for initializing variables and for determining the scope of variables
            apply equally to constants. 
            The semantics of constants are the same as the semantics of variables,
            with the following exception: 
            It is a static error [err:TBD] if a constant appears on the
            left-hand-side of an assignment expression.</p><p diff="add">The initializing expression of a prolog variable (whether assignable or not)
          must be a <termref def="dt-simple-expr">simple expression</termref> <errorref code="0001" class="ST"/>.</p><p diff="del">The initializing expression in a variable or constant declaration
         in a Prolog must be a <termref def="dt-simple-expr">simple expression</termref> [err:TBD].</p></div2><div2 id="id-function-decl"><head>Function Declarations</head><scrap headstyle="show"><head/><prod num="26" id="doc-xquery-FunctionDecl"><lhs>FunctionDecl</lhs><rhs>("declare"  ("simple"?  |  "updating")  "function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt>  |  "external"))<br/>|  ("declare"  "sequential"  "function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-Block" xlink:type="simple">Block</nt>  |  "external"))</rhs></prod></scrap><glist><gitem><label>Definitions:</label><def><p>
                  <termdef term="simple function" id="dt-simple-function">A <term>simple function</term>
                  is a function whose declaration specifies neither <code>updating</code> nor <code>sequential</code>.
                  A <termref def="dt-simple-function">simple function</termref> may optionally specify the keyword
                  <code>simple</code>.</termdef>
                </p><p>
                  <termdef term="updating function" id="dt-updating-function">An <term>updating function</term>
                  is a function whose declaration specifies the keyword <code>updating</code>.</termdef>
                </p><p>
                  <termdef term="sequential function" id="dt-sequential-function">A <term>sequential function</term>
                  is a function whose declaration specifies the keyword <code>sequential</code>.</termdef>
                </p></def></gitem><gitem><label>Category Rules:</label><def><ulist><item><p>
                  If the body of a <termref def="dt-simple-function">simple function</termref> is an EnclosedExpr,
                  it must be a <termref def="dt-simple-expr">simple expression</termref>.
                </p></item><item><p>
                  If the body of an <termref def="dt-updating-function">updating function</termref> is an EnclosedExpr,
                  it must be either an <termref def="dt-updating-expr">updating</termref> or
                  <termref def="dt-simple-expr">simple expression</termref>.
                </p></item><item><p>
                  If the body of a <termref def="dt-sequential-function">sequential function</termref> is a Block
                  it must be either a <termref def="dt-sequential-expr">sequential</termref>
                  or <termref def="dt-simple-expr">simple expression</termref>.
                </p></item><item><p>
                  If the body of a function violates the category rules for it's declared category,
                  <errorref code="0008" class="ST"/> is raised.
                </p></item></ulist></def></gitem><gitem><label>Semantics:</label><def><p>The semantics of <termref def="dt-simple-function">simple functions</termref>
                   are defined in <bibref ref="XQueryUpdate"/> and <bibref ref="XQ10"/>, and remain
                   unchanged in <termref def="dt-xqsx">XQSX</termref>.</p><p>The semantics of <termref def="dt-updating-function">updating functions</termref>
                   as originally defined in <bibref ref="XQueryUpdate"/> are extended as follows:</p><ulist><item><p>A return type is permitted.</p></item><item><p>If <code>external</code> is specified, the external function may return both a non-empty
                     <termref def="dt-pul">pending update list</termref> and a non-empty
                     <termref def="dt-xdm-instance">XDM instance</termref>.</p></item><item><p>If the result of an <termref def="dt-updating-function">updating function</termref>
                       does not match its declared result type (after applying function conversion rules
                       as specified in <xspecref spec="XQ" ref="id-function-calls">
                       <?xm-replace_text {xspecref}?></xspecref>), a type error is raised <xerrorref spec="XQ" code="0004" class="TY"/>. 
                       The default result type of an <termref def="dt-updating-function">updating function</termref>
                       is <code>item()*</code>.</p></item></ulist><p>The semantics of <termref def="dt-sequential-function">sequential functions</termref> are as follows:</p><ulist><item><p>The result of a <termref def="dt-sequential-function">sequential function</termref> is determined
                      by the first <specref ref="id-exit"/> encountered during evaluation of the Block. 
                      If no exit expression is encountered, the result of the function is the value returned by the Block
                      that comprises its body.</p></item><item><p>If the result of a <termref def="dt-sequential-function">sequential function</termref>
                       does not match its declared result type (after applying function conversion rules
                       as specified in <xspecref spec="XQ" ref="id-function-calls">
                       <?xm-replace_text {xspecref}?></xspecref>), a type error is raised <xerrorref spec="XQ" code="0004" class="TY"/>. 
                       The default result type of a <termref def="dt-sequential-function">sequential function</termref>
                       is <code>item()*</code>.</p></item><item><p>If a <termref def="dt-sequential-function">sequential function</termref>
                       is declared <code>external</code>, its implementation is outside the XQuery environment. 
                       The means by which parameters are passed to an external function and
                       its result is returned to the calling expression are implementation-defined. 
                       An external sequential function may not return a non-empty
                       <termref def="dt-pul">pending update list</termref> <errorref code="0004" class="DY"/>.</p></item></ulist></def></gitem></glist></div2><div2 id="id-query-mode-option"><head>Query Mode Option</head><scrap headstyle="show"><head/><prod num="13" id="doc-xquery-OptionDecl"><lhs>OptionDecl</lhs><rhs>"declare"  "option"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod></scrap><p>
            <termref def="dt-xqsx">XQSX</termref> defines the QName <code>xqsx:query-mode</code> as a well-known option name
            for use in an OptionDecl, which sets the <termref def="dt-query-mode">query mode</termref> in the static context for the
            module to the value specified. A static error is raised <errorref code="0009" class="ST"/> if the value for a
            <code>xqsx:query-mode</code> option is not either <code>sequential</code> or <code>simple</code>.
          </p><p>
            Implementations of <termref def="dt-xqsx">XQSX</termref> must recognize the option namespace URI
            <code>http://www.w3.org/2008/xquery-sx-10</code>, and the option <code>xqsx:query-mode</code>.
          </p></div2></div1><div1 id="id-new-exprs"><head>New Kinds of Expressions</head><p><termref def="dt-xqsx">XQSX</termref> extends the XQuery 1.0 syntax
           by adding several new kinds of expressions. 
           The effect of these new expressions on the XQuery grammar is as follows:</p><scrap headstyle="show"><head/><prod num="31" id="noid_d4e1015.doc-xquery-Expr"><lhs>Expr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ApplyExpr" xlink:type="simple">ApplyExpr</nt></rhs></prod><prod num="32" id="noid_d4e1016.doc-xquery-ApplyExpr"><lhs>ApplyExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  (";"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  ";")*)?</rhs></prod><prod num="33" id="noid_d4e1017.doc-xquery-ConcatExpr"><lhs>ConcatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="34" id="noid_d4e1018.doc-xquery-ExprSingle"><lhs>ExprSingle</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-FLWORExpr" xlink:type="simple">FLWORExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TypeswitchExpr" xlink:type="simple">TypeswitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-IfExpr" xlink:type="simple">IfExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-InsertExpr" xlink:type="simple">InsertExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-DeleteExpr" xlink:type="simple">DeleteExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-RenameExpr" xlink:type="simple">RenameExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ReplaceExpr" xlink:type="simple">ReplaceExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TransformExpr" xlink:type="simple">TransformExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-BlockExpr" xlink:type="simple">BlockExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-AssignmentExpr" xlink:type="simple">AssignmentExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ExitExpr" xlink:type="simple">ExitExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-WhileExpr" xlink:type="simple">WhileExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrExpr" xlink:type="simple">OrExpr</nt></rhs></prod></scrap><div2 id="id-apply"><head>Apply Expression</head><scrap headstyle="show"><head/><prod num="32" id="doc-xquery-ApplyExpr"><lhs>ApplyExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  (";"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  ";")*)?</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p diff="add"><termdef term="apply expression" id="dt-apply-expr">An <term>apply expression</term> is a list
                of semicolon-terminated ConcatExpr productions, called operand expressions.
                An ApplyExpr consisting of a single ConcatExpr with no semicolon is not an apply expression.</termdef>
                An apply expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p><p>The operands of the apply expression may be an expression of any category.</p><p diff="del">An apply expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></def></gitem><gitem><label>Semantics:</label><def><p>
                  <phrase diff="del">An apply expression consists of one or more semicolon-terminated operand expressions.</phrase>
                  The operand expressions <phrase diff="add">of an <termref def="dt-apply-expr">apply expression</termref></phrase> are evaluated in the order they appear. 

                   After the evaluation of each operand expression, the
                   <termref def="dt-pul">pending update list</termref> returned by
                   the expression is applied (by <code>upd:applyUpdates</code>).
                   The <termref def="dt-xdm-instance">XDM instance</termref>
                   returned by all expressions other than the last one is discarded.
                   The side effects of each expression are visible during the evaluation of subsequent expressions.
                </p><p>The result of the apply expression is
                   the <termref def="dt-xdm-instance">XDM instance</termref> returned by the last operand expression,
                   and an empty <termref def="dt-pul">pending update list</termref>.</p></def></gitem></glist></div2><div2 id="id-block"><head>Block Expressions</head><scrap headstyle="show"><head/><prod num="153" id="doc-xquery-BlockExpr"><lhs>BlockExpr</lhs><rhs>"block"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-Block" xlink:type="simple">Block</nt></rhs></prod><prod num="154" id="doc-xquery-Block"><lhs>Block</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-BlockDecls" xlink:type="simple">BlockDecls</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-BlockBody" xlink:type="simple">BlockBody</nt>  "}"</rhs></prod><prod num="155" id="doc-xquery-BlockDecls"><lhs>BlockDecls</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-BlockVarDecl" xlink:type="simple">BlockVarDecl</nt>  ";")*</rhs></prod><prod num="156" id="doc-xquery-BlockVarDecl"><lhs>BlockVarDecl</lhs><rhs>"declare"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)?  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)?)*</rhs></prod><prod num="157" id="doc-xquery-BlockBody"><lhs>BlockBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
                  <termdef term="initializing expression" id="dt-initializing-expr">The expression on
                  the right-hand side of a block variable declaration is called an
                  <term>initializing expression</term>.</termdef>
                  <termref def="dt-initializing-expr">Initializing expressions</termref> may be in any
                  category.
                </p><note><p>Block variable declarations, unlike Prolog variable declarations,
                     permit their <termref def="dt-initializing-expr">initializing expressions</termref>
                     to be <termref def="dt-updating-expr">updating</termref> or
                <termref def="dt-sequential-expr">sequential expressions</termref>.</p></note><p>If a BlockExpr contains <termref def="dt-initializing-expr">initializing expressions</termref>
                that are either <termref def="dt-updating-expr">updating</termref> or
                <termref def="dt-sequential-expr">sequential expression</termref>, then the BlockExpr is a
                <termref def="dt-sequential-expr">sequential expression</termref>. In this case the BlockBody must be
                either a <termref def="dt-simple-expr">simple</termref> or <termref def="dt-sequential-expr">sequential expression</termref>,
                otherwise a static error <errorref code="0002" class="ST"/> is raised.
                </p><p>If a BlockExpr only contains <termref def="dt-initializing-expr">initializing expressions</termref>
                that are <termref def="dt-simple-expr">simple expressions</termref> (or contains no initializing expressions),
                then the BlockBody may be an expression of any category. In this case the BlockExpr has the same category as the BlockBody.</p></def></gitem><gitem><label>Semantics:</label><def><p>A block consists of zero or more block variable declarations followed by a body. 
                   Each block variable declaration defines a modifiable local variable whose scope
                   is the remainder of the block (not including its <termref def="dt-initializing-expr">initializing expression</termref>). 
                   The variable defined in a block variable declaration occludes (hides)
                   any variable of the same name that is in scope at the location where the block appears.</p><p>It is a static error <errorref code="0005" class="ST"/> if two or more variables declared in the same block
                   have the same expanded QName.</p><p>The type of each declared variable is added to <emph>in-scope variables</emph>
                   in the <emph>static context</emph>. 
                   <phrase diff="add">If no explicit type is declared, the type of the variable is <code>item()*</code>.</phrase>

                   <phrase diff="del">If no explicit type is declared, the type of the variable is inferred from
                   the type of its <termref def="dt-initializing-expr">initializing expression</termref>.
                   If the variable has neither an explicit type declaration nor an initializing expression,
                   its type is <code>item()*</code>. </phrase>

                   If a variable has both an explicit type declaration and an
                   <termref def="dt-initializing-expr">initializing expression</termref>,
                   the value of the <termref def="dt-initializing-expr">initializing expression</termref> must match
                   the declared type according to SequenceType matching rules; otherwise a type error is raised <xerrorref spec="XQ" code="0004" class="TY"/>.</p><p>The block variable declarations are evaluated in the order written.
                   The block variable declaration evaluates its <termref def="dt-initializing-expr">initializing expression</termref>
                   and adds the resulting <termref def="dt-xdm-instance">XDM instance</termref> to the <emph>variable values</emph> in
                   the <emph>dynamic context</emph>.
                   Any <termref def="dt-pul">pending update list</termref> returned is applied using <code>upd:applyUpdates</code>.
                   If no <termref def="dt-initializing-expr">initializing expression</termref> is present, the variable has no initial value. 
                   A reference to a variable, other than on the left-hand side of an assignment expression,
                   is an error if the variable has no value in <emph>variable values</emph>
                   when the reference is evaluated <errorref code="0006" class="TY"/>.</p><p>After all the block variable declarations have been evaluated, the BlockBody expression is evaluated. 
                The result of the block expression is
                the <termref def="dt-xdm-instance">XDM instance</termref> and <termref def="dt-pul">pending update list</termref>
                returned by the BlockBody.</p></def></gitem></glist></div2><div2 id="id-assignment"><head>Assignment Expression</head><scrap headstyle="show"><head/><prod num="158" id="doc-xquery-AssignmentExpr"><lhs>AssignmentExpr</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>An assignment expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></def></gitem><gitem><label>Semantics:</label><def><p>The variable on the left-hand side of the assignment must have been declared in one of the following ways, otherwise a
                static error <errorref code="0007" class="ST"/> is raised:
                  <ulist><item><p>By a block variable declaration</p></item><item><p>As a parameter to a sequential function</p></item><item><p>By a variable declaration in the Prolog <phrase diff="add">declared as <termref def="dt-assignable">assignable</termref></phrase></p></item></ulist>
                  In all cases the variable must be in the in-scope variables, otherwise a static error is raised <xerrorref spec="XQ" code="0008" class="ST"/>.</p><note><p>Variables bound in FLWOR, typeswitch, or quantified expressions may not appear
                     on the left-hand side of an assignment.</p></note><p>
                  The expression on the right-hand side is evaluated, resulting in an
                  <termref def="dt-xdm-instance">XDM instance</termref>
                  and a <termref def="dt-pul">pending update list</termref>.
                </p><p>If the <termref def="dt-xdm-instance">XDM instance</termref>
                   returned by the expression on the right-hand side does not match the declared type
                   of the variable according to SequenceType matching rules,
                   a type error is raised <xerrorref spec="XQ" code="0004" class="TY"/>. 
                   If the types match, the <termref def="dt-xdm-instance">XDM instance</termref>
                   returned by the expression is bound to the variable (added to <emph>variable values</emph>
                   in the <emph>dynamic context</emph>.)</p><p>
                   The <termref def="dt-pul">pending update list</termref> returned by
                   the expression on the right-hand side is applied using <code>upd:applyUpdates</code>.
                </p><p>The result of an Assignment Expression is an empty
                   <termref def="dt-xdm-instance">XDM instance</termref> and an empty
                   <termref def="dt-pul">pending update list</termref>.</p></def></gitem></glist></div2><div2 id="id-while"><head>While Expression</head><scrap headstyle="show"><head/><prod num="160" id="doc-xquery-WhileExpr"><lhs>WhileExpr</lhs><rhs>"while"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-WhileBody" xlink:type="simple">WhileBody</nt></rhs></prod><prod num="161" id="doc-xquery-WhileBody"><lhs>WhileBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-Block" xlink:type="simple">Block</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
                  <termdef term="test expression" id="dt-test-expr">The expression enclosed in the
                  parentheses of a while expression is called a <term>test expression</term>.</termdef>
                  The <termref def="dt-test-expr">test expression</termref> may be in any
                  category.
                </p><p>
                  A static error <errorref code="0002" class="ST"/> is raised if the WhileBody is an
                  <termref def="dt-updating-expr">updating expression</termref>.
                </p><p>A while expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></def></gitem><gitem><label>Semantics:</label><def><p>The while expression is used for conditional iteration.  It is evaluated as follows:</p><p>
                  The <termref def="dt-test-expr">test expression</termref> is evaluated, resulting in an
                  <termref def="dt-xdm-instance">XDM instance</termref>
                  and a <termref def="dt-pul">pending update list</termref>.
                  The <termref def="dt-pul">pending update list</termref> returned by
                  the <termref def="dt-test-expr">test expression</termref> is applied using <code>upd:applyUpdates</code>.
                </p><p>
                  If the effective Boolean value of the <termref def="dt-test-expr">test expression</termref>
                  is false, the block is not evaluated. If the effective Boolean value of the
                  <termref def="dt-test-expr">test expression</termref> is true, the block is evaluated repeatedly. 
                  Each evaluation of the block may cause side effects that affect the result of re-evaluating the
                  <termref def="dt-test-expr">test expression</termref>. 
                  The <termref def="dt-test-expr">test expression</termref> is re-evaluated after each evaluation of the block. 
                  This process continues until the effective Boolean value of the <termref def="dt-test-expr">test expression</termref>
                  is evaluated to be false.
                </p><p>The result of a while expression is an empty <termref def="dt-xdm-instance">XDM instance</termref>
                   and an empty <termref def="dt-pul">pending update list</termref>.</p></def></gitem><gitem><label>Example:</label><def><p>In the following query, a while expression is used to compute a sequence
                containing all the Fibonacci numbers that are less than 100.</p><eg xml:space="preserve">block {
  declare $a as xs:integer := 0;
  declare $b as xs:integer := 1;  
  declare $c as xs:integer := $a + $b;
  declare $fibseq as xs:integer* := ($a, $b);
 
  while ($c &lt; 100) { 
     $fibseq := ($fibseq, $c);
     $a := $b;
     $b := $c;
     $c := $a + $b;
  };

  $fibseq;
}
</eg></def></gitem></glist></div2><div2 id="id-exit"><head>Exit Expression</head><scrap headstyle="show"><head/><prod num="159" id="doc-xquery-ExitExpr"><lhs>ExitExpr</lhs><rhs>"exit"  "returning"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The operand of an exit expression may be an expression of any category.</p><p>An exit expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></def></gitem><gitem><label>Semantics:</label><def><p>An exit expression serves to define the result of the enclosing function or query body.</p><p>
                  The operand expression of the exit expression is evaluated, resulting in an
                  <termref def="dt-xdm-instance">XDM instance</termref>
                  and a <termref def="dt-pul">pending update list</termref>.
                  The <termref def="dt-pul">pending update list</termref> returned by
                  the operand expression is applied using <code>upd:applyUpdates</code>.
                </p><p>If an exit expression is evaluated within the body of a function,
                   further evaluation of the function body is interrupted and the
                   <termref def="dt-xdm-instance">XDM instance</termref> returned by
                   the operand expression is returned as the result of the function call.</p><p>If an exit expression is evaluated within a query body
                   (i.e., not within the body of a function), further evaluation of the query
                   is interrupted and the <termref def="dt-xdm-instance">XDM instance</termref>
                   returned by the operand expression is returned as the result of the query.</p><note><p>An exit expression in a block terminates evaluation of the
                     enclosing function body or query, not just the immediately enclosing block.</p></note></def></gitem></glist></div2><div2 id="id-query-mode-pragma"><head>Query Mode Pragma</head><scrap headstyle="show"><head/><prod num="67" id="doc-xquery-ExtensionExpr"><lhs>ExtensionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-Pragma" xlink:type="simple">Pragma</nt>+  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="68" id="doc-xquery-Pragma"><lhs>Pragma</lhs><rhs>"(#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-PragmaContents" xlink:type="simple">PragmaContents</nt>)?  "#)"</rhs></prod><prod num="69" id="doc-xquery-PragmaContents"><lhs>PragmaContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt>* - (Char* '#)' Char*))</rhs></prod></scrap><p>
            <termref def="dt-xqsx">XQSX</termref> defines the QName <code>xqsx:query-mode</code> as a well-known pragma name
            for use in an ExtensionExpr, which sets the <termref def="dt-query-mode">query mode</termref> in the static context for the
            enclosed expression to the value specified. A static error is raised <errorref code="0009" class="ST"/> if the value for a
            <code>xqsx:query-mode</code> pragma is not either <code>sequential</code> or <code>simple</code>.
          </p><p>
            Implementations of <termref def="dt-xqsx">XQSX</termref> must recognize the pragma namespace URI
            <code>http://www.w3.org/2008/xquery-sx-10</code>, and the pragma name <code>xqsx:query-mode</code>.
          </p></div2></div1><div1 id="id-existing-exprs"><head>Changes to Existing Expressions</head><p> 
          <termref def="dt-xqsx">XQSX</termref> imposes new category rules, evaluation order and additional semantics
          on top of existing <bibref ref="XQ10"/> and <bibref ref="XQueryUpdate"/> expressions, detailed in this section.
        </p><div2 id="id-parenthesized-expr"><head>Parentheses</head><scrap headstyle="show"><head/><prod num="91" id="doc-xquery-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>An expression of any category may be enclosed in parentheses;
                   the resulting expression has the same category as the original expression.
                   An empty parenthesized expression <code>( )</code> is a
                   <termref def="dt-simple-expr">simple expression</termref>.
                 </p></def></gitem></glist></div2><div2 id="id-function-call"><head>Function Calls</head><scrap headstyle="show"><head/><prod num="95" id="doc-xquery-FunctionCall"><lhs>FunctionCall</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*)?  ")"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
                  If the function called is a <termref def="dt-simple-function">simple function</termref>, 
                  the argument expressions <phrase diff="add">can either be all <termref def="dt-simple-expr">simple</termref> and
                  <termref def="dt-updating-expr">updating expressions</termref>, or all <termref def="dt-simple-expr">simple</termref> and
                  <termref def="dt-sequential-expr">sequential expressions</termref>.</phrase> 

                  <phrase diff="del">must be <termref def="dt-simple-expr">simple expressions</termref> or
                  <termref def="dt-updating-expr">updating expressions</termref>.</phrase> 

                  If the argument expressions contain
                  an <termref def="dt-updating-expr">updating expression</termref> then the function call is an
                  <termref def="dt-updating-expr">updating expression</termref>,
                  <phrase diff="add">if they contain
                  a <termref def="dt-sequential-expr">sequential expression</termref> then the function call is a
                  <termref def="dt-sequential-expr">sequential expression</termref>,
                  </phrase>
                  otherwise it is a 
                  <termref def="dt-simple-expr">simple expression</termref>.
                </p><p>
                  If the function called is an <termref def="dt-updating-function">updating function</termref>, 
                  the argument expressions must be <termref def="dt-simple-expr">simple expressions</termref> or
                  <termref def="dt-updating-expr">updating expressions</termref>. The function call is an
                  <termref def="dt-updating-expr">updating expression</termref>.
                </p><p>
                  If the function called is a <termref def="dt-sequential-function">sequential function</termref>, 
                  the argument expressions must be <termref def="dt-simple-expr">simple expressions</termref> <phrase diff="add"> or
                  <termref def="dt-sequential-expr">sequential expressions</termref></phrase> . The function
                  call expression is a <termref def="dt-updating-expr">sequential expression</termref>.
                </p><p>
                  If the arguments of a function call violate the category rules for the function's category,
                  <errorref code="0002" class="ST"/> is raised.
                </p></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                Argument expressions are evaluated from left to right, then the function is invoked.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update lists</termref> returned by the argument expressions
                  are merged with the <termref def="dt-pul">pending update list</termref> returned by the function
                  itself by calling <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2><div2 id="id-path-expr"><head>Path Expressions</head><scrap headstyle="show"><head/><prod num="70" id="doc-xquery-PathExpr"><lhs>PathExpr</lhs><rhs>("/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>?)<br/>|  ("//"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>)<br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt></rhs></prod><prod num="71" id="doc-xquery-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The category of a path expression is determined by the following rules:</p><ulist><item><p>
                      If <termref def="dt-query-mode">query mode</termref> is <code>simple</code>, <errorref code="0001" class="ST"/>
                      is raised if any StepExpr in the RelativePathExpr is an <termref def="dt-updating-expr">updating</termref> or
                      <termref def="dt-sequential-expr">sequential expression</termref>.
                    </p></item><item><p>If any StepExpr in the RelativePathExpr is an <termref def="dt-updating-expr">updating expression</termref>,
                       then all StepExpr must be <termref def="dt-updating-expr">updating</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>.
                       In this case, the path expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If any StepExpr in the RelativePathExpr is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all StepExpr must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>. 
                       In this case, the path expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the path expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  StepExpr are evaluated in order from left to right.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update lists</termref> returned by each of the StepExpr
                  are merged by calling <code>upd:mergeUpdates</code>, and returned as part of the result of the path expression.
                </p></def></gitem></glist></div2><div2 id="id-predicate"><head>Predicates</head><scrap headstyle="show"><head/><prod num="73" id="doc-xquery-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-PredicateList" xlink:type="simple">PredicateList</nt></rhs></prod><prod num="83" id="doc-xquery-FilterExpr"><lhs>FilterExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-PredicateList" xlink:type="simple">PredicateList</nt></rhs></prod><prod num="84" id="doc-xquery-PredicateList"><lhs>PredicateList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod><prod num="85" id="doc-xquery-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The category of a FilterExpr or AxisStep is determined by the following rules:</p><ulist><item><p>
                      If <termref def="dt-query-mode">query mode</termref> is <code>simple</code>, <errorref code="0001" class="ST"/>
                      is raised if the primary expression or a predicate expression of any FilterExpr or AxisStep is an
                      <termref def="dt-updating-expr">updating</termref> or
                      <termref def="dt-sequential-expr">sequential expression</termref>.
                    </p></item><item><p>If either the primary expression or any predicate expression of a FilterExpr or AxisStep
                       is an <termref def="dt-updating-expr">updating expression</termref>,
                       then all such expressions must be <termref def="dt-updating-expr">updating</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>.
                       In this case, the FilterExpr or AxisStep is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If either the primary expression or any predicate expression of a FilterExpr or AxisStep
                       is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all such expressions must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>. 
                       In this case, the FilterExpr or AxisStep is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the FilterExpr or AxisStep is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  First the reverse step, forward step or primary expression is evaluated, then predicates are evaluated from left to right.
                  Each predicate expression must be evaluated to completion before the next is evaluated.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by the primary expression
                  is merged with the <termref def="dt-pul">pending update lists</termref> returned by the predicate expressions
                  by calling <code>upd:mergeUpdates</code>. The resulting pending update list is returned as part of the result
                  of the FilterExpr or AxisStep.
                </p></def></gitem></glist></div2><div2 id="id-concat-expr"><head>Concatenation Expressions</head><scrap headstyle="show"><head/><prod num="33" id="doc-xquery-ConcatExpr"><lhs>ConcatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The category of a concatenation expression is determined by the following rules:</p><ulist><item><p>If any operand is an <termref def="dt-updating-expr">updating expression</termref>,
                       then all operands must be <termref def="dt-updating-expr">updating</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>.
                       In this case, the concatenation expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If any operand is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all operands must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>. 
                       In this case, the concatenation expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the concatenation expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  Operand expressions are evaluated once, from left to right. Side effects of each sequential operand expression are visible to subsequent operand expressions.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The concatenation expression evaluates each of its operands and concatenates the resulting 
                  <termref def="dt-xdm-instance">XDM instances</termref> and
                  <termref def="dt-pul">pending update lists</termref>, in order.
                  <termref def="dt-pul">Pending update lists</termref> are concatenated by the
                  <code>upd:mergeUpdates</code> operation.
                </p></def></gitem></glist></div2><div2 id="id-node-constructors"><head>Direct and Computed Node Constructors</head><scrap headstyle="show"><head/><prod num="98" id="doc-xquery-DirElemConstructor"><lhs>DirElemConstructor</lhs><rhs>"&lt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-DirAttributeList" xlink:type="simple">DirAttributeList</nt>  ("/&gt;"  |  ("&gt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirElemContent" xlink:type="simple">DirElemContent</nt>*  "&lt;/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  "&gt;"))</rhs></prod><prod num="99" id="doc-xquery-DirAttributeList"><lhs>DirAttributeList</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirAttributeValue" xlink:type="simple">DirAttributeValue</nt>)?)*</rhs></prod><prod num="109" id="doc-xquery-CDataSection"><lhs>CDataSection</lhs><rhs>"&lt;![CDATA["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CDataSectionContents" xlink:type="simple">CDataSectionContents</nt>  "]]&gt;"</rhs></prod><prod num="107" id="doc-xquery-DirPIConstructor"><lhs>DirPIConstructor</lhs><rhs>"&lt;?"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PITarget" xlink:type="simple">PITarget</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirPIContents" xlink:type="simple">DirPIContents</nt>)?  "?&gt;"</rhs></prod><prod num="105" id="doc-xquery-DirCommentConstructor"><lhs>DirCommentConstructor</lhs><rhs>"&lt;!--"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirCommentContents" xlink:type="simple">DirCommentContents</nt>  "--&gt;"</rhs></prod><prod num="113" id="doc-xquery-CompElemConstructor"><lhs>CompElemConstructor</lhs><rhs>"element"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ContentExpr" xlink:type="simple">ContentExpr</nt>?  "}"</rhs></prod><prod num="115" id="doc-xquery-CompAttrConstructor"><lhs>CompAttrConstructor</lhs><rhs>"attribute"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="112" id="doc-xquery-CompDocConstructor"><lhs>CompDocConstructor</lhs><rhs>"document"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="116" id="doc-xquery-CompTextConstructor"><lhs>CompTextConstructor</lhs><rhs>"text"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="118" id="doc-xquery-CompPIConstructor"><lhs>CompPIConstructor</lhs><rhs>"processing-instruction"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="117" id="doc-xquery-CompCommentConstructor"><lhs>CompCommentConstructor</lhs><rhs>"comment"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The category of a node constructor is determined by the following rules:</p><ulist><item><p>If any operand is an <termref def="dt-updating-expr">updating expression</termref>,
                       then all operands must be <termref def="dt-updating-expr">updating</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>.
                       In this case, the node constructor is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If any operand is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all operands must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>. 
                       In this case, the node constructor is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the node constructor is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><olist><item><p>The name expression is evaluated (computed element/attribute/processing-instruction constructors only).</p></item><item><p>The direct attribute constructors are evaluated from left to right (direct element constructors only).</p></item><item><p>The child or value expressions are evaluated from left to right.</p></item></olist></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update lists</termref> from each operand expression are concatenated by the
                  <code>upd:mergeUpdates</code> operation, producing the resulting pending update list.
                </p></def></gitem></glist></div2><div2 id="id-FLWOR-expr"><head>FLWOR Expressions</head><scrap headstyle="show"><head/><prod num="35" id="doc-xquery-FLWORExpr"><lhs>FLWORExpr</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-ForClause" xlink:type="simple">ForClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-LetClause" xlink:type="simple">LetClause</nt>)+  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-WhereClause" xlink:type="simple">WhereClause</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-OrderByClause" xlink:type="simple">OrderByClause</nt>?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="36" id="doc-xquery-ForClause"><lhs>ForClause</lhs><rhs>"for"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="37" id="doc-xquery-PositionalVar"><lhs>PositionalVar</lhs><rhs>"at"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="38" id="doc-xquery-LetClause"><lhs>LetClause</lhs><rhs>"let"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="39" id="doc-xquery-WhereClause"><lhs>WhereClause</lhs><rhs>"where"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="40" id="doc-xquery-OrderByClause"><lhs>OrderByClause</lhs><rhs>(("order"  "by")  |  ("stable"  "order"  "by"))  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-OrderSpecList" xlink:type="simple">OrderSpecList</nt></rhs></prod><prod num="41" id="doc-xquery-OrderSpecList"><lhs>OrderSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-OrderSpec" xlink:type="simple">OrderSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-OrderSpec" xlink:type="simple">OrderSpec</nt>)*</rhs></prod><prod num="42" id="doc-xquery-OrderSpec"><lhs>OrderSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-OrderModifier" xlink:type="simple">OrderModifier</nt></rhs></prod><prod num="43" id="doc-xquery-OrderModifier"><lhs>OrderModifier</lhs><rhs>("ascending"  |  "descending")?  ("empty"  ("greatest"  |  "least"))?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
                  The <code>for</code>, <code>let</code>, <code>where</code>, and <code>order by</code>
                  clauses

                  <phrase diff="add">can either be all
                  <termref def="dt-simple-expr">simple</termref></phrase><phrase diff="add"> and
                  <termref def="dt-updating-expr">updating expressions</termref>, or all
                  <termref def="dt-simple-expr">simple</termref> and
                  <termref def="dt-sequential-expr">sequential expressions</termref>.</phrase>

                  <phrase diff="del">must contain either <termref def="dt-simple-expr">simple expressions</termref>
                  or <termref def="dt-updating-expr">updating expressions</termref>.</phrase>
                </p><ulist><item><p>
                      If <termref def="dt-query-mode">query mode</termref> is <code>simple</code>, <errorref code="0001" class="ST"/>
                      is raised if any <code>for</code>, <code>let</code>, <code>where</code>, or <code>order by</code> clause is an
                      <termref def="dt-updating-expr">updating</termref> or
                      <termref def="dt-sequential-expr">sequential expression</termref>.
                    </p></item><item><p>
                      If the above clauses contain an <termref def="dt-updating-expr">updating expression</termref>,
                      then all clauses must either be a <termref def="dt-simple-expr">simple expression</termref>
                      or an <termref def="dt-updating-expr">updating expression</termref>, otherwise a static error
                      is raised <errorref code="0002" class="ST"/>. The FLWOR expression itself is an
                      <termref def="dt-updating-expr">updating expression</termref>.
                    </p></item><item diff="add"><p>
                      If the above clauses contain a <termref def="dt-sequential-expr">sequential expression</termref>,
                      then all clauses must either be a <termref def="dt-simple-expr">simple expression</termref>
                      or an <termref def="dt-sequential-expr">sequential expression</termref>, otherwise a static error
                      is raised <errorref code="0002" class="ST"/>. The FLWOR expression itself is an
                      <termref def="dt-sequential-expr">sequential expression</termref>.
                    </p></item><item><p>
                      If the above clauses do not contain an <termref def="dt-updating-expr">updating expression</termref>
                      <phrase diff="add">or a <termref def="dt-sequential-expr">sequential expression</termref></phrase>,
                      then the <code>return</code> clause may be an expression of any category. The category of the FLWOR expression
                      is the same as the category of the expression in its <code>return</code> clause.
                    </p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><ulist><item><p>
                    <emph>For Clause:</emph> The associated expression is evaluated first to produce the binding sequnce, then
                    the next clause is evaluated once for each item in the binding sequence. Any side effects in the associated
                    expression are visible to the evaluation of the next clause.
                  </p></item><item><p>
                    <emph>Let Clause:</emph> The associated expression is evaluated first to produce the binding sequnce, then
                    the next clause is evaluated. Any side effects in the associated
                    expression are visible to the evaluation of the next clause.
                  </p></item><item><p>
                    <emph>Where Clause:</emph> The where expression is evaluated once, then
                    the next clause is evaluated. Any side effects in the where
                    expression are visible to the evaluation of the next clause.
                  </p></item><item><p>
                    <emph>Order By Clause:</emph> The orderspecs are evaluated from left to right on each tuple in the tuple stream.
                    The tuple stream is reordered, then the next clause is evaluated.
                  </p></item><item><p>
                    <emph>Return Clause:</emph> The return expresion is evaluated once.
                  </p></item></ulist></def></gitem><gitem><label>Additional Semantics:</label><def><p>The result of a FLWOR expression is the concatenation of the
                   <termref def="dt-xdm-instance">XDM instances</termref> or
                   <termref def="dt-pul">pending update lists</termref> returned by
                   successive evaluations of the <code>return</code> clause in evaluation order, as well as
                   the <termref def="dt-pul">pending update lists</termref> returned by any of the other
                   FLWOR clauses.
                   <termref def="dt-pul">Pending update lists</termref> are concatenated by the
                   <code>upd:mergeUpdates</code> operation.</p></def></gitem></glist></div2><div2 id="id-conditional-expr"><head>Conditional Expressions</head><scrap headstyle="show"><head/><prod num="47" id="doc-xquery-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p diff="add">The test, then and else expressions can be of any type. An error <errorref code="0002" class="ST"/> is raised if
                one of the expressions is <termref def="dt-updating-expr">updating</termref> and another is <termref def="dt-sequential-expr">sequential</termref>.
                </p><ulist diff="add"><item><p>If the test, then or else expression is an <termref def="dt-updating-expr">updating expression</termref>,
                  the conditional expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If the test, then or else expression is a <termref def="dt-sequential-expr">sequential expression</termref>,
                  the conditional expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherise, the conditional expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist><p diff="del">
                  The test expression must be a <termref def="dt-simple-expr">simple expression</termref> or an
                  <termref def="dt-updating-expr">updating expression</termref>.
                </p><p diff="del">Let the then and else expressions be called <term>branches</term>. Then:</p><ulist diff="del"><item><p>If one branch is an <termref def="dt-updating-expr">updating expression</termref>,
                       the other branch must be an <termref def="dt-updating-expr">updating expression</termref>
                       or a <termref def="dt-simple-expr">simple expression</termref>.
                       In this case, the conditional expression is an
                       <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If one branch is a <termref def="dt-sequential-expr">sequential expression</termref>,
                    the other branch must be a <termref def="dt-sequential-expr">sequential expression</termref>
                    or a <termref def="dt-simple-expr">simple expression</termref>. 
                    In this case, the conditional expression is a
                    <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the conditional expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  The test expression is evaluated first. Next either the then expression or the else expression (but not both) is evaluated.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by the conditional
                  expression is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                  from the test expression and the executed branch of the conditional expression using <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2><div2 id="id-quantified-expr"><head>Quantified Expressions</head><scrap headstyle="show"><head/><prod num="44" id="doc-xquery-QuantifiedExpr"><lhs>QuantifiedExpr</lhs><rhs>("some"  |  "every")  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "satisfies"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>The category of a quantified expression is determined by the following rules:</p><ulist><item><p>
                      If <termref def="dt-query-mode">query mode</termref> is <code>simple</code>, <errorref code="0001" class="ST"/>
                      is raised if any quantified expression clause or the satisfies expression is an
                      <termref def="dt-updating-expr">updating</termref> or
                      <termref def="dt-sequential-expr">sequential expression</termref>.
                    </p></item><item><p>If any quantified expression clause or the satisfies expression
                       is an <termref def="dt-updating-expr">updating expression</termref>,
                       then all such expressions must be <termref def="dt-updating-expr">updating</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>.
                       In this case, the quantified expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If any quantified expression clause or the satisfies expression
                       is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all such expressions must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>, otherwise a static error is raised <errorref code="0002" class="ST"/>. 
                       In this case, the quantified expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the quantified expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  The quantified expression clauses are initially evaluated as specified
                  by <bibref ref="XQ10"/>, generating a tuple stream. Then the satisfies clause is evaluated once for each tuple in the tuple stream, in order. 
                  If the satisfies clause contains a sequential expression, the side effects of
                  each iteration are visible to subsequent evaluations of the return clause.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by the quantified
                  expression is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                  from the quantified expression clauses and the satisfies expression using <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2><div2 id="id-typeswitch-expr"><head>Typeswitch Expressions</head><scrap headstyle="show"><head/><prod num="45" id="doc-xquery-TypeswitchExpr"><lhs>TypeswitchExpr</lhs><rhs>"typeswitch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CaseClause" xlink:type="simple">CaseClause</nt>+  "default"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>)?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p diff="add">The operand, case and default expressions can be of any type. An error <errorref code="0002" class="ST"/> is raised if
                one of the expressions is <termref def="dt-updating-expr">updating</termref> and another is <termref def="dt-sequential-expr">sequential</termref>.
                </p><ulist diff="add"><item><p>If an operand, case or default expression is an <termref def="dt-updating-expr">updating expression</termref>,
                  the typeswitch expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If an operand, case or default expression is a <termref def="dt-sequential-expr">sequential expression</termref>,
                  the typeswitch expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherise, the typeswitch expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist><p diff="del">
                  The expression in the operand expression must be a
                  <termref def="dt-simple-expr">simple expression</termref> or an
                  <termref def="dt-updating-expr">updating expression</termref>.
                </p><p diff="del">Let the expressions in the <code>case</code> and <code>default</code>
                   clauses be called <term>branches</term>. Then:</p><ulist diff="del"><item><p>If any branch is an <termref def="dt-updating-expr">updating expression</termref>,
                       the other branches must be <termref def="dt-updating-expr">updating expressions</termref>
                       or <termref def="dt-simple-expr">simple expressions</termref>.
                       In this case, the typeswitch expression is an
                       <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If any branch is a <termref def="dt-sequential-expr">sequential expression</termref>,
                       then all branches must be <termref def="dt-sequential-expr">sequential</termref> or
                       <termref def="dt-simple-expr">simple expressions</termref>. 
                       In this case, the typeswitch expression is a
                       <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherwise, the typeswitch expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  The operand expression is evaluated first. Then, exactly one of the return expressions is evaluated.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by the typeswitch
                  expression is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                  from the operand expression and the executed branch of the typeswitch expression using <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2><div2 id="id-update-expr"><head>Insert, Delete, Replace, and Rename Expressions</head><scrap headstyle="show"><head/><prod num="145" id="doc-xquery-InsertExpr"><lhs>InsertExpr</lhs><rhs>"insert"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-SourceExpr" xlink:type="simple">SourceExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-InsertExprTargetChoice" xlink:type="simple">InsertExprTargetChoice</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="144" id="doc-xquery-InsertExprTargetChoice"><lhs>InsertExprTargetChoice</lhs><rhs>(("as"  ("first"  |  "last"))?  "into")<br/>|  "after"<br/>|  "before"</rhs></prod><prod num="146" id="doc-xquery-DeleteExpr"><lhs>DeleteExpr</lhs><rhs>"delete"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="147" id="doc-xquery-ReplaceExpr"><lhs>ReplaceExpr</lhs><rhs>"replace"  ("value"  "of")?  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt>  "with"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="148" id="doc-xquery-RenameExpr"><lhs>RenameExpr</lhs><rhs>"rename"  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt>  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xquery-NewNameExpr" xlink:type="simple">NewNameExpr</nt></rhs></prod><prod num="149" id="doc-xquery-SourceExpr"><lhs>SourceExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="150" id="doc-xquery-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="151" id="doc-xquery-NewNameExpr"><lhs>NewNameExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p>
                  Insert, delete, replace, and rename expressions are <termref def="dt-updating-expr">updating expressions</termref>,
                  and are extended to accept both <termref def="dt-updating-expr">updating</termref> and
                  <termref def="dt-simple-expr">simple expressions</termref> as their operands. It is a static error
                  <errorref code="0002" class="ST"/> for the operand of one of these expressions to be a
                  <termref def="dt-sequential-expr">sequential expression</termref>.
                </p></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  Order of evaluation for insert, delete, replace, and rename expressions is irrelevent since their operands
                  cannot be sequential expressions.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by insert, delete, replace, and rename expressions
                  is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                  from the operands of the expression and the <termref def="dt-pul">pending update list</termref> produced by the
                  expression itself using <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2><div2 id="id-transform-expr"><head>Transform Expressions</head><scrap headstyle="show"><head/><prod num="152" id="doc-xquery-TransformExpr"><lhs>TransformExpr</lhs><rhs>"copy"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "modify"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod></scrap><glist><gitem><label>Category Rules:</label><def><p diff="add">
                  The copy, modify and return clauses of a transform expression can be of any type. An error <errorref code="0002" class="ST"/> is raised if
                  one of the copy or return clauses is <termref def="dt-updating-expr">updating</termref> and either the copy, modify or
                  return clauses is <termref def="dt-sequential-expr">sequential</termref>.
                </p><ulist diff="add"><item><p>If one of the copy or return clauses is an <termref def="dt-updating-expr">updating expression</termref>,
                  the transform expression is an <termref def="dt-updating-expr">updating expression</termref>.</p></item><item><p>If one of the copy, modify or return clauses is a <termref def="dt-sequential-expr">sequential expression</termref>,
                  the transform expression is a <termref def="dt-sequential-expr">sequential expression</termref>.</p></item><item><p>Otherise, the transform expression is a <termref def="dt-simple-expr">simple expression</termref>.</p></item></ulist><p diff="del">
                  The <code>modify</code> clause must contain an
                  <termref def="dt-updating-expr">updating</termref> or
                  <termref def="dt-simple-expr">simple expression</termref>.
                </p><p diff="del">
                  The <code>copy</code> clause must contain a
                  <termref def="dt-simple-expr">simple expression</termref> or an
                  <termref def="dt-updating-expr">updating expression</termref>.
                </p><ulist diff="del"><item><p>
                      If the <code>copy</code> clause contains a <termref def="dt-simple-expr">simple expression</termref>,
                      the <code>return</code> clause may be an expression of any category.
                      In this case, the category of the transform expression is the same as the category of its <code>return</code> clause.
                    </p></item><item><p>
                      If the <code>copy</code> clause contains an <termref def="dt-updating-expr">updating expression</termref>,
                      the <code>return</code> clause can contain an
                      <termref def="dt-updating-expr">updating</termref> or
                      <termref def="dt-simple-expr">simple expression</termref>.
                      In this case, the transform expression is an <termref def="dt-updating-expr">updating expression</termref>.
                    </p></item></ulist></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  Copy clauses are evaluated in order, then the modify expression is evaluated. Finally the return clause is evaluated.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The semantics of a transform expression as defined in <xspecref spec="XU" ref="id-transform"/>
                  are extended as follows:
                </p><ulist><item><p>If the modify clause returns a non-empty <termref def="dt-xdm-instance">XDM instance</termref> it is discarded.</p></item><item><p>
                      The <termref def="dt-pul">pending update list</termref> returned by the transform
                      expression is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                      from the copy clause and the return clause using <code>upd:mergeUpdates</code>.
                    </p></item></ulist></def></gitem></glist></div2><div2 id="id-other-expr"><head>Other Expressions</head><p>
                  All expressions not listed above are extended as follows.
                  This includes the following kinds of expressions:
                </p><ulist><item><p>Range expressions</p></item><item><p>Union, intersect, and except expressions</p></item><item><p>Arithmetic, comparison, and logical expressions</p></item><item><p>Ordered and unordered expressions</p></item><item><p>Instance of, cast, castable, and treat expressions</p></item><item><p>Validate expressions</p></item><item><p>Extension expressions (pragmas)</p></item></ulist><glist><gitem><label>Category Rules:</label><def><p diff="add">
                  All other expressions are extended to accept any type of expressions as their operands. An error <errorref code="0002" class="ST"/> is raised if
                  one of the operands is <termref def="dt-updating-expr">updating</termref> and another is <termref def="dt-sequential-expr">sequential</termref>.
                  If an operand of the expression is
                  <termref def="dt-updating-expr">updating</termref> then the expression itself is <termref def="dt-updating-expr">updating</termref>,
                  if an operand is
                  <termref def="dt-sequential-expr">sequential</termref> then the expression itself is <termref def="dt-sequential-expr">sequential</termref>,
                  otherwise it is <termref def="dt-simple-expr">simple</termref>.
                </p><p diff="del">
                  All expressions not listed above are extended to accept both <termref def="dt-updating-expr">updating</termref> and
                  <termref def="dt-simple-expr">simple expressions</termref> as their operands. If an operand of the expression is
                  <termref def="dt-updating-expr">updating</termref> then the expression itself is <termref def="dt-updating-expr">updating</termref>,
                  otherwise it is <termref def="dt-simple-expr">simple</termref>.
                </p></def></gitem><gitem><label>Evaluation Order:</label><def><p>
                  Operand expressions are evaluated once, from left to right.
                </p></def></gitem><gitem><label>Additional Semantics:</label><def><p>
                  The <termref def="dt-pul">pending update list</termref> returned by any other expression
                  is calculated by merging the <termref def="dt-pul">pending update lists</termref>
                  from the operands of that expression using <code>upd:mergeUpdates</code>.
                </p></def></gitem></glist></div2></div1><div1 id="id-example"><head>Example</head><p>The following function returns <code>true</code> or <code>false</code>
         according to whether its parameter is a known user name, and logs the event:</p><eg xml:space="preserve">declare sequential function validate-and-log($username as xs:string) 
     as xs:boolean {
        declare $log as document-node() := fn:doc("log.xml"); 
        declare $entry as element() :=
           &lt;access-attempt&gt;
              &lt;timestamp&gt;{fn:current-dateTime()}&lt;/timestamp&gt;
              &lt;user-name&gt;{$username}&lt;/user-name&gt;
              &lt;access-allowed/&gt;
           &lt;/access-attempt&gt; ;
        declare $result as xs:boolean;
        if ($username = doc("users.xml")/current-users/user/name )
        then (
           replace value of node $entry/access-allowed with "Yes";
           $result := true();
        ) else (
           replace value of node $entry/access-allowed with "No";
           $result := false();
        );
        insert node $entry as last into $log; 
        fn:put($log, "log.xml"); 
        exit returning $result;
} 
</eg></div1></body><back><div1 id="id-grammar"><head>EBNF for XQuery 1.0 Grammar with Scripting Extensions</head><p>The EBNF in this document and in this section is aligned with
the current XML Query 1.0 grammar (see <bibref ref="XQ10"/>).</p><scrap role="non-terminal-structure-expand" headstyle="show"><head/><prod num="1" id="prod-xquery-Module"><lhs>Module</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VersionDecl" xlink:type="simple">VersionDecl</nt>?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-LibraryModule" xlink:type="simple">LibraryModule</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-MainModule" xlink:type="simple">MainModule</nt>)</rhs></prod><prod num="2" id="prod-xquery-VersionDecl"><lhs>VersionDecl</lhs><rhs>"xquery"  "version"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt>  ("encoding"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Separator" xlink:type="simple">Separator</nt></rhs></prod><prod num="3" id="prod-xquery-MainModule"><lhs>MainModule</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Prolog" xlink:type="simple">Prolog</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QueryBody" xlink:type="simple">QueryBody</nt></rhs></prod><prod num="4" id="prod-xquery-LibraryModule"><lhs>LibraryModule</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ModuleDecl" xlink:type="simple">ModuleDecl</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Prolog" xlink:type="simple">Prolog</nt></rhs></prod><prod num="5" id="prod-xquery-ModuleDecl"><lhs>ModuleDecl</lhs><rhs>"module"  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Separator" xlink:type="simple">Separator</nt></rhs></prod><prod num="6" id="prod-xquery-Prolog"><lhs>Prolog</lhs><rhs>((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DefaultNamespaceDecl" xlink:type="simple">DefaultNamespaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Setter" xlink:type="simple">Setter</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NamespaceDecl" xlink:type="simple">NamespaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Import" xlink:type="simple">Import</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Separator" xlink:type="simple">Separator</nt>)*  ((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarDecl" xlink:type="simple">VarDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-FunctionDecl" xlink:type="simple">FunctionDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OptionDecl" xlink:type="simple">OptionDecl</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Separator" xlink:type="simple">Separator</nt>)*</rhs></prod><prod num="7" id="prod-xquery-Setter"><lhs>Setter</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BoundarySpaceDecl" xlink:type="simple">BoundarySpaceDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DefaultCollationDecl" xlink:type="simple">DefaultCollationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BaseURIDecl" xlink:type="simple">BaseURIDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ConstructionDecl" xlink:type="simple">ConstructionDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderingModeDecl" xlink:type="simple">OrderingModeDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EmptyOrderDecl" xlink:type="simple">EmptyOrderDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RevalidationDecl" xlink:type="simple">RevalidationDecl</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CopyNamespacesDecl" xlink:type="simple">CopyNamespacesDecl</nt></rhs></prod><prod num="8" id="prod-xquery-Import"><lhs>Import</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SchemaImport" xlink:type="simple">SchemaImport</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ModuleImport" xlink:type="simple">ModuleImport</nt></rhs></prod><prod num="9" id="prod-xquery-Separator"><lhs>Separator</lhs><rhs>";"</rhs></prod><prod num="10" id="prod-xquery-NamespaceDecl"><lhs>NamespaceDecl</lhs><rhs>"declare"  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="11" id="prod-xquery-BoundarySpaceDecl"><lhs>BoundarySpaceDecl</lhs><rhs>"declare"  "boundary-space"  ("preserve"  |  "strip")</rhs></prod><prod num="12" id="prod-xquery-DefaultNamespaceDecl"><lhs>DefaultNamespaceDecl</lhs><rhs>"declare"  "default"  ("element"  |  "function")  "namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="13" id="prod-xquery-OptionDecl"><lhs>OptionDecl</lhs><rhs>"declare"  "option"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="14" id="prod-xquery-OrderingModeDecl"><lhs>OrderingModeDecl</lhs><rhs>"declare"  "ordering"  ("ordered"  |  "unordered")</rhs></prod><prod num="15" id="prod-xquery-EmptyOrderDecl"><lhs>EmptyOrderDecl</lhs><rhs>"declare"  "default"  "order"  "empty"  ("greatest"  |  "least")</rhs></prod><prod num="16" id="prod-xquery-CopyNamespacesDecl"><lhs>CopyNamespacesDecl</lhs><rhs>"declare"  "copy-namespaces"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PreserveMode" xlink:type="simple">PreserveMode</nt>  ","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-InheritMode" xlink:type="simple">InheritMode</nt></rhs></prod><prod num="17" id="prod-xquery-PreserveMode"><lhs>PreserveMode</lhs><rhs>"preserve"  |  "no-preserve"</rhs></prod><prod num="18" id="prod-xquery-InheritMode"><lhs>InheritMode</lhs><rhs>"inherit"  |  "no-inherit"</rhs></prod><prod num="19" id="prod-xquery-DefaultCollationDecl"><lhs>DefaultCollationDecl</lhs><rhs>"declare"  "default"  "collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="20" id="prod-xquery-BaseURIDecl"><lhs>BaseURIDecl</lhs><rhs>"declare"  "base-uri"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt></rhs></prod><prod num="21" id="prod-xquery-SchemaImport"><lhs>SchemaImport</lhs><rhs>"import"  "schema"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SchemaPrefix" xlink:type="simple">SchemaPrefix</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>  ("at"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>)*)?</rhs></prod><prod num="22" id="prod-xquery-SchemaPrefix"><lhs>SchemaPrefix</lhs><rhs>("namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  "=")  |  ("default"  "element"  "namespace")</rhs></prod><prod num="23" id="prod-xquery-ModuleImport"><lhs>ModuleImport</lhs><rhs>"import"  "module"  ("namespace"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  "=")?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>  ("at"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>)*)?</rhs></prod><prod num="24" id="prod-xquery-VarDecl"><lhs>VarDecl</lhs><rhs>"declare"  ("unassignable"?  |  "assignable")  "variable"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ((":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)  |  "external")</rhs></prod><prod num="25" id="prod-xquery-ConstructionDecl"><lhs>ConstructionDecl</lhs><rhs>"declare"  "construction"  ("strip"  |  "preserve")</rhs></prod><prod num="26" id="prod-xquery-FunctionDecl"><lhs>FunctionDecl</lhs><rhs>("declare"  ("simple"?  |  "updating")  "function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt>  |  "external"))<br/>|  ("declare"  "sequential"  "function"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt>)?  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Block" xlink:type="simple">Block</nt>  |  "external"))</rhs></prod><prod num="27" id="prod-xquery-ParamList"><lhs>ParamList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Param" xlink:type="simple">Param</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Param" xlink:type="simple">Param</nt>)*</rhs></prod><prod num="28" id="prod-xquery-Param"><lhs>Param</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?</rhs></prod><prod num="29" id="prod-xquery-EnclosedExpr"><lhs>EnclosedExpr</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="30" id="prod-xquery-QueryBody"><lhs>QueryBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="31" id="prod-xquery-Expr"><lhs>Expr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ApplyExpr" xlink:type="simple">ApplyExpr</nt></rhs></prod><prod num="32" id="prod-xquery-ApplyExpr"><lhs>ApplyExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  (";"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ConcatExpr" xlink:type="simple">ConcatExpr</nt>  ";")*)?</rhs></prod><prod num="33" id="prod-xquery-ConcatExpr"><lhs>ConcatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="34" id="prod-xquery-ExprSingle"><lhs>ExprSingle</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-FLWORExpr" xlink:type="simple">FLWORExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeswitchExpr" xlink:type="simple">TypeswitchExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-IfExpr" xlink:type="simple">IfExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-InsertExpr" xlink:type="simple">InsertExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DeleteExpr" xlink:type="simple">DeleteExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RenameExpr" xlink:type="simple">RenameExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ReplaceExpr" xlink:type="simple">ReplaceExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TransformExpr" xlink:type="simple">TransformExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BlockExpr" xlink:type="simple">BlockExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AssignmentExpr" xlink:type="simple">AssignmentExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExitExpr" xlink:type="simple">ExitExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-WhileExpr" xlink:type="simple">WhileExpr</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrExpr" xlink:type="simple">OrExpr</nt></rhs></prod><prod num="35" id="prod-xquery-FLWORExpr"><lhs>FLWORExpr</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ForClause" xlink:type="simple">ForClause</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-LetClause" xlink:type="simple">LetClause</nt>)+  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-WhereClause" xlink:type="simple">WhereClause</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderByClause" xlink:type="simple">OrderByClause</nt>?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="36" id="prod-xquery-ForClause"><lhs>ForClause</lhs><rhs>"for"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PositionalVar" xlink:type="simple">PositionalVar</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="37" id="prod-xquery-PositionalVar"><lhs>PositionalVar</lhs><rhs>"at"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="38" id="prod-xquery-LetClause"><lhs>LetClause</lhs><rhs>"let"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="39" id="prod-xquery-WhereClause"><lhs>WhereClause</lhs><rhs>"where"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="40" id="prod-xquery-OrderByClause"><lhs>OrderByClause</lhs><rhs>(("order"  "by")  |  ("stable"  "order"  "by"))  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderSpecList" xlink:type="simple">OrderSpecList</nt></rhs></prod><prod num="41" id="prod-xquery-OrderSpecList"><lhs>OrderSpecList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderSpec" xlink:type="simple">OrderSpec</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderSpec" xlink:type="simple">OrderSpec</nt>)*</rhs></prod><prod num="42" id="prod-xquery-OrderSpec"><lhs>OrderSpec</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderModifier" xlink:type="simple">OrderModifier</nt></rhs></prod><prod num="43" id="prod-xquery-OrderModifier"><lhs>OrderModifier</lhs><rhs>("ascending"  |  "descending")?  ("empty"  ("greatest"  |  "least"))?  ("collation"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-URILiteral" xlink:type="simple">URILiteral</nt>)?</rhs></prod><prod num="44" id="prod-xquery-QuantifiedExpr"><lhs>QuantifiedExpr</lhs><rhs>("some"  |  "every")  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "satisfies"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="45" id="prod-xquery-TypeswitchExpr"><lhs>TypeswitchExpr</lhs><rhs>"typeswitch"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CaseClause" xlink:type="simple">CaseClause</nt>+  "default"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>)?  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="46" id="prod-xquery-CaseClause"><lhs>CaseClause</lhs><rhs>"case"  ("$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  "as")?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="47" id="prod-xquery-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="48" id="prod-xquery-OrExpr"><lhs>OrExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AndExpr" xlink:type="simple">AndExpr</nt> ( "or"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AndExpr" xlink:type="simple">AndExpr</nt> )*</rhs></prod><prod num="49" id="prod-xquery-AndExpr"><lhs>AndExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> ( "and"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> )*</rhs></prod><prod num="50" id="prod-xquery-ComparisonExpr"><lhs>ComparisonExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RangeExpr" xlink:type="simple">RangeExpr</nt> ( (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ValueComp" xlink:type="simple">ValueComp</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-GeneralComp" xlink:type="simple">GeneralComp</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NodeComp" xlink:type="simple">NodeComp</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RangeExpr" xlink:type="simple">RangeExpr</nt> )?</rhs></prod><prod num="51" id="prod-xquery-RangeExpr"><lhs>RangeExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> ( "to"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> )?</rhs></prod><prod num="52" id="prod-xquery-AdditiveExpr"><lhs>AdditiveExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> ( ("+"  |  "-")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> )*</rhs></prod><prod num="53" id="prod-xquery-MultiplicativeExpr"><lhs>MultiplicativeExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-UnionExpr" xlink:type="simple">UnionExpr</nt> ( ("*"  |  "div"  |  "idiv"  |  "mod")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-UnionExpr" xlink:type="simple">UnionExpr</nt> )*</rhs></prod><prod num="54" id="prod-xquery-UnionExpr"><lhs>UnionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> ( ("union"  |  "|")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> )*</rhs></prod><prod num="55" id="prod-xquery-IntersectExceptExpr"><lhs>IntersectExceptExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> ( ("intersect"  |  "except")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> )*</rhs></prod><prod num="56" id="prod-xquery-InstanceofExpr"><lhs>InstanceofExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TreatExpr" xlink:type="simple">TreatExpr</nt> ( "instance"  "of"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="57" id="prod-xquery-TreatExpr"><lhs>TreatExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CastableExpr" xlink:type="simple">CastableExpr</nt> ( "treat"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="58" id="prod-xquery-CastableExpr"><lhs>CastableExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CastExpr" xlink:type="simple">CastExpr</nt> ( "castable"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="59" id="prod-xquery-CastExpr"><lhs>CastExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-UnaryExpr" xlink:type="simple">UnaryExpr</nt> ( "cast"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="60" id="prod-xquery-UnaryExpr"><lhs>UnaryExpr</lhs><rhs>("-"  |  "+")* <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ValueExpr" xlink:type="simple">ValueExpr</nt></rhs></prod><prod num="61" id="prod-xquery-ValueExpr"><lhs>ValueExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ValidateExpr" xlink:type="simple">ValidateExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PathExpr" xlink:type="simple">PathExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExtensionExpr" xlink:type="simple">ExtensionExpr</nt></rhs></prod><prod num="62" id="prod-xquery-GeneralComp"><lhs>GeneralComp</lhs><rhs>"="  |  "!="  |  "&lt;"  |  "&lt;="  |  "&gt;"  |  "&gt;="</rhs></prod><prod num="63" id="prod-xquery-ValueComp"><lhs>ValueComp</lhs><rhs>"eq"  |  "ne"  |  "lt"  |  "le"  |  "gt"  |  "ge"</rhs></prod><prod num="64" id="prod-xquery-NodeComp"><lhs>NodeComp</lhs><rhs>"is"  |  "&lt;&lt;"  |  "&gt;&gt;"</rhs></prod><prod num="65" id="prod-xquery-ValidateExpr"><lhs>ValidateExpr</lhs><rhs>"validate"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ValidationMode" xlink:type="simple">ValidationMode</nt>?  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="66" id="prod-xquery-ValidationMode"><lhs>ValidationMode</lhs><rhs>"lax"  |  "strict"</rhs></prod><prod num="67" id="prod-xquery-ExtensionExpr"><lhs>ExtensionExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Pragma" xlink:type="simple">Pragma</nt>+  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="68" id="prod-xquery-Pragma"><lhs>Pragma</lhs><rhs>"(#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PragmaContents" xlink:type="simple">PragmaContents</nt>)?  "#)"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="69" id="prod-xquery-PragmaContents"><lhs>PragmaContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt>* - (Char* '#)' Char*))</rhs></prod><prod num="70" id="prod-xquery-PathExpr"><lhs>PathExpr</lhs><rhs>("/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>?)<br/>|  ("//"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>)<br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt></rhs><com><phrase><xspecref ref="parse-note-leading-lone-slash" spec="XQ">gn: leading-lone-slash</xspecref></phrase></com></prod><prod num="71" id="prod-xquery-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod><prod num="72" id="prod-xquery-StepExpr"><lhs>StepExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-FilterExpr" xlink:type="simple">FilterExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AxisStep" xlink:type="simple">AxisStep</nt></rhs></prod><prod num="73" id="prod-xquery-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PredicateList" xlink:type="simple">PredicateList</nt></rhs></prod><prod num="74" id="prod-xquery-ForwardStep"><lhs>ForwardStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ForwardAxis" xlink:type="simple">ForwardAxis</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AbbrevForwardStep" xlink:type="simple">AbbrevForwardStep</nt></rhs></prod><prod num="75" id="prod-xquery-ForwardAxis"><lhs>ForwardAxis</lhs><rhs>("child"  "::")<br/>|  ("descendant"  "::")<br/>|  ("attribute"  "::")<br/>|  ("self"  "::")<br/>|  ("descendant-or-self"  "::")<br/>|  ("following-sibling"  "::")<br/>|  ("following"  "::")</rhs></prod><prod num="76" id="prod-xquery-AbbrevForwardStep"><lhs>AbbrevForwardStep</lhs><rhs>"@"?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NodeTest" xlink:type="simple">NodeTest</nt></rhs></prod><prod num="77" id="prod-xquery-ReverseStep"><lhs>ReverseStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ReverseAxis" xlink:type="simple">ReverseAxis</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AbbrevReverseStep" xlink:type="simple">AbbrevReverseStep</nt></rhs></prod><prod num="78" id="prod-xquery-ReverseAxis"><lhs>ReverseAxis</lhs><rhs>("parent"  "::")<br/>|  ("ancestor"  "::")<br/>|  ("preceding-sibling"  "::")<br/>|  ("preceding"  "::")<br/>|  ("ancestor-or-self"  "::")</rhs></prod><prod num="79" id="prod-xquery-AbbrevReverseStep"><lhs>AbbrevReverseStep</lhs><rhs>".."</rhs></prod><prod num="80" id="prod-xquery-NodeTest"><lhs>NodeTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-KindTest" xlink:type="simple">KindTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NameTest" xlink:type="simple">NameTest</nt></rhs></prod><prod num="81" id="prod-xquery-NameTest"><lhs>NameTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Wildcard" xlink:type="simple">Wildcard</nt></rhs></prod><prod num="82" id="prod-xquery-Wildcard"><lhs>Wildcard</lhs><rhs>"*"<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  ":"  "*")<br/>|  ("*"  ":"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>)</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="83" id="prod-xquery-FilterExpr"><lhs>FilterExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PredicateList" xlink:type="simple">PredicateList</nt></rhs></prod><prod num="84" id="prod-xquery-PredicateList"><lhs>PredicateList</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod><prod num="85" id="prod-xquery-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod><prod num="86" id="prod-xquery-PrimaryExpr"><lhs>PrimaryExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Literal" xlink:type="simple">Literal</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarRef" xlink:type="simple">VarRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ParenthesizedExpr" xlink:type="simple">ParenthesizedExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ContextItemExpr" xlink:type="simple">ContextItemExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-FunctionCall" xlink:type="simple">FunctionCall</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OrderedExpr" xlink:type="simple">OrderedExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-UnorderedExpr" xlink:type="simple">UnorderedExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Constructor" xlink:type="simple">Constructor</nt></rhs></prod><prod num="87" id="prod-xquery-Literal"><lhs>Literal</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NumericLiteral" xlink:type="simple">NumericLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="88" id="prod-xquery-NumericLiteral"><lhs>NumericLiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DecimalLiteral" xlink:type="simple">DecimalLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DoubleLiteral" xlink:type="simple">DoubleLiteral</nt></rhs></prod><prod num="89" id="prod-xquery-VarRef"><lhs>VarRef</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt></rhs></prod><prod num="90" id="prod-xquery-VarName"><lhs>VarName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt></rhs></prod><prod num="91" id="prod-xquery-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod><prod num="92" id="prod-xquery-ContextItemExpr"><lhs>ContextItemExpr</lhs><rhs>"."</rhs></prod><prod num="93" id="prod-xquery-OrderedExpr"><lhs>OrderedExpr</lhs><rhs>"ordered"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="94" id="prod-xquery-UnorderedExpr"><lhs>UnorderedExpr</lhs><rhs>"unordered"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="95" id="prod-xquery-FunctionCall"><lhs>FunctionCall</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*)?  ")"</rhs><com><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-sx-reserved-function-names" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">gn: sx-reserved-function-names</loc></com><com><phrase><xspecref ref="parse-note-parens" spec="XQ">gn: parens</xspecref></phrase></com></prod><prod num="96" id="prod-xquery-Constructor"><lhs>Constructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirectConstructor" xlink:type="simple">DirectConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ComputedConstructor" xlink:type="simple">ComputedConstructor</nt></rhs></prod><prod num="97" id="prod-xquery-DirectConstructor"><lhs>DirectConstructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirElemConstructor" xlink:type="simple">DirElemConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirCommentConstructor" xlink:type="simple">DirCommentConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirPIConstructor" xlink:type="simple">DirPIConstructor</nt></rhs></prod><prod num="98" id="prod-xquery-DirElemConstructor"><lhs>DirElemConstructor</lhs><rhs>"&lt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirAttributeList" xlink:type="simple">DirAttributeList</nt>  ("/&gt;"  |  ("&gt;"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirElemContent" xlink:type="simple">DirElemContent</nt>*  "&lt;/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  "&gt;"))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="99" id="prod-xquery-DirAttributeList"><lhs>DirAttributeList</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  "="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirAttributeValue" xlink:type="simple">DirAttributeValue</nt>)?)*</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="100" id="prod-xquery-DirAttributeValue"><lhs>DirAttributeValue</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QuotAttrValueContent" xlink:type="simple">QuotAttrValueContent</nt>)*  '"')<br/>|  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AposAttrValueContent" xlink:type="simple">AposAttrValueContent</nt>)*  "'")</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="101" id="prod-xquery-QuotAttrValueContent"><lhs>QuotAttrValueContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QuotAttrContentChar" xlink:type="simple">QuotAttrContentChar</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CommonContent" xlink:type="simple">CommonContent</nt></rhs></prod><prod num="102" id="prod-xquery-AposAttrValueContent"><lhs>AposAttrValueContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AposAttrContentChar" xlink:type="simple">AposAttrContentChar</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CommonContent" xlink:type="simple">CommonContent</nt></rhs></prod><prod num="103" id="prod-xquery-DirElemContent"><lhs>DirElemContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirectConstructor" xlink:type="simple">DirectConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CDataSection" xlink:type="simple">CDataSection</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CommonContent" xlink:type="simple">CommonContent</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementContentChar" xlink:type="simple">ElementContentChar</nt></rhs></prod><prod num="104" id="prod-xquery-CommonContent"><lhs>CommonContent</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CharRef" xlink:type="simple">CharRef</nt>  |  "{{"  |  "}}"  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt></rhs></prod><prod num="105" id="prod-xquery-DirCommentConstructor"><lhs>DirCommentConstructor</lhs><rhs>"&lt;!--"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirCommentContents" xlink:type="simple">DirCommentContents</nt>  "--&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="106" id="prod-xquery-DirCommentContents"><lhs>DirCommentContents</lhs><rhs>((<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt> - '-')  |  ('-'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt> - '-')))*</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="107" id="prod-xquery-DirPIConstructor"><lhs>DirPIConstructor</lhs><rhs>"&lt;?"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PITarget" xlink:type="simple">PITarget</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-S" xlink:type="simple">S</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DirPIContents" xlink:type="simple">DirPIContents</nt>)?  "?&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="108" id="prod-xquery-DirPIContents"><lhs>DirPIContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt>* - (Char* '?&gt;' Char*))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="109" id="prod-xquery-CDataSection"><lhs>CDataSection</lhs><rhs>"&lt;![CDATA["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CDataSectionContents" xlink:type="simple">CDataSectionContents</nt>  "]]&gt;"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="110" id="prod-xquery-CDataSectionContents"><lhs>CDataSectionContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt>* - (Char* ']]&gt;' Char*))</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="111" id="prod-xquery-ComputedConstructor"><lhs>ComputedConstructor</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompDocConstructor" xlink:type="simple">CompDocConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompElemConstructor" xlink:type="simple">CompElemConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompAttrConstructor" xlink:type="simple">CompAttrConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompTextConstructor" xlink:type="simple">CompTextConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompCommentConstructor" xlink:type="simple">CompCommentConstructor</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CompPIConstructor" xlink:type="simple">CompPIConstructor</nt></rhs></prod><prod num="112" id="prod-xquery-CompDocConstructor"><lhs>CompDocConstructor</lhs><rhs>"document"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="113" id="prod-xquery-CompElemConstructor"><lhs>CompElemConstructor</lhs><rhs>"element"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ContentExpr" xlink:type="simple">ContentExpr</nt>?  "}"</rhs></prod><prod num="114" id="prod-xquery-ContentExpr"><lhs>ContentExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="115" id="prod-xquery-CompAttrConstructor"><lhs>CompAttrConstructor</lhs><rhs>"attribute"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="116" id="prod-xquery-CompTextConstructor"><lhs>CompTextConstructor</lhs><rhs>"text"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="117" id="prod-xquery-CompCommentConstructor"><lhs>CompCommentConstructor</lhs><rhs>"comment"  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="118" id="prod-xquery-CompPIConstructor"><lhs>CompPIConstructor</lhs><rhs>"processing-instruction"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  |  ("{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>  "}"))  "{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt>?  "}"</rhs></prod><prod num="119" id="prod-xquery-SingleType"><lhs>SingleType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AtomicType" xlink:type="simple">AtomicType</nt>  "?"?</rhs></prod><prod num="120" id="prod-xquery-TypeDeclaration"><lhs>TypeDeclaration</lhs><rhs>"as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SequenceType" xlink:type="simple">SequenceType</nt></rhs></prod><prod num="121" id="prod-xquery-SequenceType"><lhs>SequenceType</lhs><rhs>("empty-sequence"  "("  ")")<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ItemType" xlink:type="simple">ItemType</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt>?)</rhs></prod><prod num="122" id="prod-xquery-OccurrenceIndicator"><lhs>OccurrenceIndicator</lhs><rhs>"?"  |  "*"  |  "+"</rhs><com><phrase><xspecref ref="parse-note-occurrence-indicators" spec="XQ">gn: occurrence-indicators</xspecref></phrase></com></prod><prod num="123" id="prod-xquery-ItemType"><lhs>ItemType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-KindTest" xlink:type="simple">KindTest</nt>  |  ("item"  "("  ")")  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AtomicType" xlink:type="simple">AtomicType</nt></rhs></prod><prod num="124" id="prod-xquery-AtomicType"><lhs>AtomicType</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt></rhs></prod><prod num="125" id="prod-xquery-KindTest"><lhs>KindTest</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-DocumentTest" xlink:type="simple">DocumentTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementTest" xlink:type="simple">ElementTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AttributeTest" xlink:type="simple">AttributeTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PITest" xlink:type="simple">PITest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CommentTest" xlink:type="simple">CommentTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TextTest" xlink:type="simple">TextTest</nt><br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AnyKindTest" xlink:type="simple">AnyKindTest</nt></rhs></prod><prod num="126" id="prod-xquery-AnyKindTest"><lhs>AnyKindTest</lhs><rhs>"node"  "("  ")"</rhs></prod><prod num="127" id="prod-xquery-DocumentTest"><lhs>DocumentTest</lhs><rhs>"document-node"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementTest" xlink:type="simple">ElementTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>)?  ")"</rhs></prod><prod num="128" id="prod-xquery-TextTest"><lhs>TextTest</lhs><rhs>"text"  "("  ")"</rhs></prod><prod num="129" id="prod-xquery-CommentTest"><lhs>CommentTest</lhs><rhs>"comment"  "("  ")"</rhs></prod><prod num="130" id="prod-xquery-PITest"><lhs>PITest</lhs><rhs>"processing-instruction"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NCName" xlink:type="simple">NCName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt>)?  ")"</rhs></prod><prod num="131" id="prod-xquery-AttributeTest"><lhs>AttributeTest</lhs><rhs>"attribute"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AttribNameOrWildcard" xlink:type="simple">AttribNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeName" xlink:type="simple">TypeName</nt>)?)?  ")"</rhs></prod><prod num="132" id="prod-xquery-AttribNameOrWildcard"><lhs>AttribNameOrWildcard</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AttributeName" xlink:type="simple">AttributeName</nt>  |  "*"</rhs></prod><prod num="133" id="prod-xquery-SchemaAttributeTest"><lhs>SchemaAttributeTest</lhs><rhs>"schema-attribute"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AttributeDeclaration" xlink:type="simple">AttributeDeclaration</nt>  ")"</rhs></prod><prod num="134" id="prod-xquery-AttributeDeclaration"><lhs>AttributeDeclaration</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-AttributeName" xlink:type="simple">AttributeName</nt></rhs></prod><prod num="135" id="prod-xquery-ElementTest"><lhs>ElementTest</lhs><rhs>"element"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementNameOrWildcard" xlink:type="simple">ElementNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeName" xlink:type="simple">TypeName</nt>  "?"?)?)?  ")"</rhs></prod><prod num="136" id="prod-xquery-ElementNameOrWildcard"><lhs>ElementNameOrWildcard</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementName" xlink:type="simple">ElementName</nt>  |  "*"</rhs></prod><prod num="137" id="prod-xquery-SchemaElementTest"><lhs>SchemaElementTest</lhs><rhs>"schema-element"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementDeclaration" xlink:type="simple">ElementDeclaration</nt>  ")"</rhs></prod><prod num="138" id="prod-xquery-ElementDeclaration"><lhs>ElementDeclaration</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ElementName" xlink:type="simple">ElementName</nt></rhs></prod><prod num="139" id="prod-xquery-AttributeName"><lhs>AttributeName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt></rhs></prod><prod num="140" id="prod-xquery-ElementName"><lhs>ElementName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt></rhs></prod><prod num="141" id="prod-xquery-TypeName"><lhs>TypeName</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-QName" xlink:type="simple">QName</nt></rhs></prod><prod num="142" id="prod-xquery-URILiteral"><lhs>URILiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-StringLiteral" xlink:type="simple">StringLiteral</nt></rhs></prod><prod num="143" id="prod-xquery-RevalidationDecl"><lhs>RevalidationDecl</lhs><rhs>"declare"  "revalidation"  ("strict"  |  "lax"  |  "skip")</rhs></prod><prod num="144" id="prod-xquery-InsertExprTargetChoice"><lhs>InsertExprTargetChoice</lhs><rhs>(("as"  ("first"  |  "last"))?  "into")<br/>|  "after"<br/>|  "before"</rhs></prod><prod num="145" id="prod-xquery-InsertExpr"><lhs>InsertExpr</lhs><rhs>"insert"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-SourceExpr" xlink:type="simple">SourceExpr</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-InsertExprTargetChoice" xlink:type="simple">InsertExprTargetChoice</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="146" id="prod-xquery-DeleteExpr"><lhs>DeleteExpr</lhs><rhs>"delete"  ("node"  |  "nodes")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt></rhs></prod><prod num="147" id="prod-xquery-ReplaceExpr"><lhs>ReplaceExpr</lhs><rhs>"replace"  ("value"  "of")?  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt>  "with"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="148" id="prod-xquery-RenameExpr"><lhs>RenameExpr</lhs><rhs>"rename"  "node"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TargetExpr" xlink:type="simple">TargetExpr</nt>  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-NewNameExpr" xlink:type="simple">NewNameExpr</nt></rhs></prod><prod num="149" id="prod-xquery-SourceExpr"><lhs>SourceExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="150" id="prod-xquery-TargetExpr"><lhs>TargetExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="151" id="prod-xquery-NewNameExpr"><lhs>NewNameExpr</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="152" id="prod-xquery-TransformExpr"><lhs>TransformExpr</lhs><rhs>"copy"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "modify"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="153" id="prod-xquery-BlockExpr"><lhs>BlockExpr</lhs><rhs>"block"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Block" xlink:type="simple">Block</nt></rhs></prod><prod num="154" id="prod-xquery-Block"><lhs>Block</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BlockDecls" xlink:type="simple">BlockDecls</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BlockBody" xlink:type="simple">BlockBody</nt>  "}"</rhs></prod><prod num="155" id="prod-xquery-BlockDecls"><lhs>BlockDecls</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-BlockVarDecl" xlink:type="simple">BlockVarDecl</nt>  ";")*</rhs></prod><prod num="156" id="prod-xquery-BlockVarDecl"><lhs>BlockVarDecl</lhs><rhs>"declare"  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)?  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?  (":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>)?)*</rhs></prod><prod num="157" id="prod-xquery-BlockBody"><lhs>BlockBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Expr" xlink:type="simple">Expr</nt></rhs></prod><prod num="158" id="prod-xquery-AssignmentExpr"><lhs>AssignmentExpr</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="159" id="prod-xquery-ExitExpr"><lhs>ExitExpr</lhs><rhs>"exit"  "returning"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt></rhs></prod><prod num="160" id="prod-xquery-WhileExpr"><lhs>WhileExpr</lhs><rhs>"while"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-ExprSingle" xlink:type="simple">ExprSingle</nt>  ")"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-WhileBody" xlink:type="simple">WhileBody</nt></rhs></prod><prod num="161" id="prod-xquery-WhileBody"><lhs>WhileBody</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Block" xlink:type="simple">Block</nt></rhs></prod></scrap><div2 id="id-terminal-symbols"><head>Terminal Symbols</head><scrap headstyle="show"><head/><prod num="162" id="prod-xquery-IntegerLiteral"><lhs>IntegerLiteral</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt></rhs></prod><prod num="163" id="prod-xquery-DecimalLiteral"><lhs>DecimalLiteral</lhs><rhs>("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt>  "."  [0-9]*)</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="164" id="prod-xquery-DoubleLiteral"><lhs>DoubleLiteral</lhs><rhs>(("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt>  ("."  [0-9]*)?))  [eE]  [+-]?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Digits" xlink:type="simple">Digits</nt></rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="165" id="prod-xquery-StringLiteral"><lhs>StringLiteral</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CharRef" xlink:type="simple">CharRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  [^"&amp;])*  '"')  |  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-PredefinedEntityRef" xlink:type="simple">PredefinedEntityRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CharRef" xlink:type="simple">CharRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  [^'&amp;])*  "'")</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="166" id="prod-xquery-PredefinedEntityRef"><lhs>PredefinedEntityRef</lhs><rhs>"&amp;"  ("lt"  |  "gt"  |  "amp"  |  "quot"  |  "apos")  ";"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com></prod><prod num="167" id="prod-xquery-EscapeQuot"><lhs>EscapeQuot</lhs><rhs>'""'</rhs></prod><prod num="168" id="prod-xquery-EscapeApos"><lhs>EscapeApos</lhs><rhs>"''"</rhs></prod><prod num="169" id="prod-xquery-ElementContentChar"><lhs>ElementContentChar</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt> - [{}&lt;&amp;]</rhs></prod><prod num="170" id="prod-xquery-QuotAttrContentChar"><lhs>QuotAttrContentChar</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt> - ["{}&lt;&amp;]</rhs></prod><prod num="171" id="prod-xquery-AposAttrContentChar"><lhs>AposAttrContentChar</lhs><rhs><nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt> - ['{}&lt;&amp;]</rhs></prod><prod num="172" id="prod-xquery-Comment"><lhs>Comment</lhs><rhs>"(:"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-CommentContents" xlink:type="simple">CommentContents</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Comment" xlink:type="simple">Comment</nt>)*  ":)"</rhs><com><phrase><xspecref ref="ws-explicit" spec="XQ">ws: explicit</xspecref></phrase></com><com><phrase><xspecref ref="parse-note-comments" spec="XQ">gn: comments</xspecref></phrase></com></prod><prod num="173" id="prod-xquery-PITarget"><lhs>PITarget</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-PITarget" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-PITarget]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="174" id="prod-xquery-CharRef"><lhs>CharRef</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-CharRef" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-CharRef]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="175" id="prod-xquery-QName"><lhs>QName</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-QName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-QName]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="176" id="prod-xquery-NCName"><lhs>NCName</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-NCName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-NCName]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="177" id="prod-xquery-S"><lhs>S</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-S" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-S]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod><prod num="178" id="prod-xquery-Char"><lhs>Char</lhs><rhs><xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-Char" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-Char]</xnt></rhs><com><phrase><xspecref ref="parse-note-xml-version" spec="XQ">gn: xml-version</xspecref></phrase></com></prod></scrap><p>The following symbols are used only in the definition of
  terminal symbols; they are not terminal symbols in the
  grammar of <specref ref="id-grammar"/>.</p><scrap headstyle="show"><head/><prod num="179" id="prod-xquery-Digits"><lhs>Digits</lhs><rhs>[0-9]+</rhs></prod><prod num="180" id="prod-xquery-CommentContents"><lhs>CommentContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xquery-Char" xlink:type="simple">Char</nt>+ - (Char* ('(:' | ':)') Char*))</rhs></prod></scrap></div2><div2 id="id-extra-grammatical-constraints" diff="add"><head>Extra-grammatical Constraints</head><p>This section contains XQuery SX specific constraints on the EBNF productions, which are required to parse legal sentences.
  The notes below are referenced from the right side of the production, with the notation: <emph>/* gn: &lt;id&gt; */</emph>.</p><constraintnote id="parse-note-sx-reserved-function-names" type="xgc"><head>sx-reserved-function-names</head><p>
  XQuery SX adds the term "while" to the list of names in
  <xspecref spec="XQ" ref="id-reserved-fn-names"><?xm-replace_text {xspecref}?></xspecref>.
  <note><p>This is a backwards incompatibility with <bibref ref="XQ10"/>.</p></note>
</p></constraintnote></div2></div1><div1 id="id-xqsx-xqueryx"><head>XML Syntax (XQueryX) for XQuery Scripting Extension 1.0</head><p>
<bibref ref="XQX10"/> defines an XML representation of <bibref ref="XQ10"/>. 
<bibref ref="ScriptingRequirements"/> states
"The syntax for updates MAY have more than one syntax binding. 
One syntax MUST be convenient for humans to read and write. 
One syntax MUST be expressed in XML in a way that reflects
the underlying structure of the operations."
This appendix specifies an XML Schema that defines the
XML representation of XQuery Scripting Extension 1.0 by representing the abstract syntax
found in <specref ref="id-grammar"/>. 
This XML representation for XQuery Scripting Extension 1.0 integrates
with the XML representation for XQuery 1.0 and that for the 
XQuery Update Facility 1.0.</p><p>
The XML Schema specified in this appendix accomplishes its integration by importing
the XML Schema defined for XQueryX in <bibref ref="XQueryUpdate"/>,
incorporating all of its type and element definitions. 
It then extends that schema by adding definitions of new types and elements
in a namespace belonging to the XQuery Scripting Extension 1.0 specification. 
</p><div2 id="id-xqsx-xqueryx-schema"><head>Schema</head><p>
This section specifies the XML Schema that defines the complex types and elements
for XQueryX in support of XQuery Scripting Extension 1.0, including changes to the prolog
and the addition of several new expressions.
It also specifies a second XML Schema that redefines an element defined in
XQueryX 1.0. 
Copies of these two schemata can be found at
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx.xsd</loc>. 
and <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx-redef.xsd" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx-redef.xsd</loc>. 
Please note that the content of these schemata are subject to change at any time before this document is published as a Recommendation. 
</p><eg xml:space="preserve">

&lt;xsd:schema
     xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
     xmlns:xqx="http://www.w3.org/2005/XQueryX"
     xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
     xmlns:xqxsx="http://www.w3.org/2008/xquery-sx-10"
     targetNamespace="http://www.w3.org/2008/xquery-sx-10"
     elementFormDefault="qualified" 
     attributeFormDefault="unqualified"&gt;

&lt;!-- Initial creation                  2008-03-01: Jim Melton --&gt;
&lt;!-- Added FunctionDecl redefinition   2008-03-11: Jim Melton --&gt;
&lt;!-- Updated to new WD grammar         2008-11-25: Jim Melton --&gt;
&lt;!-- Reviewed, cleaned, corrections    2009-08-17: Jim Melton --&gt;
&lt;!-- Updated to recent grammar changes 2010-02-15: Jim Melton --&gt;
  &lt;xsd:import namespace="http://www.w3.org/2007/xquery-update-10"
     schemaLocation="http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx-redef.xsd"/&gt;
  &lt;xsd:import namespace="http://www.w3.org/2005/XQueryX"/&gt;

  &lt;!-- Declare new type for constant declarations             --&gt;
  &lt;!-- Corresponds to the following grammar productions:      --&gt;
  &lt;!-- VarDecl ::= "declare" ([un]assignable variable)        --&gt;
  &lt;!--               "$" QName TypeDeclaration?               --&gt;
  &lt;!--               ((":=" ExprSingle) | "external")         --&gt;
  &lt;xsd:complexType name="constDecl"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element name="constName" type="xqx:QName"/&gt;
      &lt;xsd:element ref="xqx:typeDeclaration" minOccurs="0"/&gt;
      &lt;xsd:choice&gt;
        &lt;xsd:element name="varValue" type="xqx:exprWrapper"/&gt;
        &lt;xsd:element name="external" type="xqx:emptyContent"/&gt;
      &lt;/xsd:choice&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="constDecl" type="xqxsx:constDecl"
               substitutionGroup="xqx:prologPartTwoItem"/&gt;


  &lt;!-- Create substitution grp for scripting extension exprs  --&gt;
  &lt;xsd:complexType name="expr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxuf:expr"/&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;!-- Make scripting extension subst grp part of expr grp    --&gt;
  &lt;xsd:element name="expr" type="xqxsx:expr" abstract="true"
               substitutionGroup="xqxuf:expr"/&gt;


  &lt;!-- AssignmentExpr:                                        --&gt;
  &lt;!--   AssignmentExpr ::= "$" VarName ":=" ExprSingle       --&gt;
  &lt;xsd:complexType name="assignmentExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxsx:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element ref="xqx:positionalVariableBinding"/&gt;
          &lt;xsd:element name="assignedExpr" type="xqx:exprWrapper"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="assignmentExpr" type="xqxsx:assignmentExpr"
               substitutionGroup="xqxsx:expr"/&gt;


  &lt;!-- Block (1 of 3):                                        --&gt;
  &lt;!--   BlockExpr ::= "block" Block                          --&gt;
  &lt;!--   Block ::= "{" BlockDecls BlockBody "}"               --&gt;
  &lt;!--   BlockDecls ::= (BlockVarDecl ";")*                   --&gt;
  &lt;xsd:complexType name="block"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxsx:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element ref="xqxsx:blockVarDecl"
                       minOccurs="0" maxOccurs="unbounded"/&gt;
          &lt;xsd:element ref="xqxsx:blockBody"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="block" type="xqxsx:block"
               substitutionGroup="xqxsx:expr"/&gt;

  &lt;!-- Block (2 of 3):                                        --&gt;
  &lt;!--   BlockVarDecl ::=                                     --&gt;
  &lt;!--     "declare" "$" VarName TypeDeclaration?             --&gt;
  &lt;!--             (":=" ExprSingle)?                         --&gt;
  &lt;!--          ("," "$" VarName TypeDeclaration?             --&gt;
  &lt;!--             (":=" ExprSingle)? )*                      --&gt;
  &lt;xsd:complexType name="blockVarDecl"&gt;
      &lt;xsd:sequence minOccurs="1" maxOccurs="unbounded"&gt;
        &lt;xsd:element name="varName" type="xqx:QName"/&gt;
        &lt;xsd:element ref="xqx:typeDeclaration" minOccurs="0"/&gt;
        &lt;xsd:element name="varValue" type="xqx:exprWrapper"
                     minOccurs="0"/&gt;
      &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="blockVarDecl" type="xqxsx:blockVarDecl"/&gt;

  &lt;!-- Block (3 of 3):                                        --&gt;
  &lt;!--   BlockBody ::= Expr                                   --&gt;
  &lt;xsd:complexType name="blockBody"&gt;
    &lt;xsd:sequence&gt;
      &lt;xsd:element ref="xqxsx:applyExpr"/&gt;
    &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="blockBody" type="xqxsx:blockBody"/&gt;


  &lt;!-- ExitExpr:                                              --&gt;
  &lt;!--   ExitExpr ::= "exit" "returning" ExprSingle           --&gt;
  &lt;xsd:complexType name="exitExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqx:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element ref="xqx:expr"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="exitExpr" type="xqxsx:exitExpr"
               substitutionGroup="xqx:expr"/&gt;


  &lt;!-- WhileExpr:                                             --&gt;
  &lt;!--   WhileExpr ::= "while" "(" ExprSingle ")" WhileBody   --&gt;
  &lt;!--   WhileBody ::= Block                                  --&gt;
  &lt;xsd:complexType name="whileExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxsx:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="whileTest" type="xqx:exprWrapper"/&gt;
          &lt;xsd:element ref="xqxsx:block"/&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="whileExpr" type="xqxsx:whileExpr"
               substitutionGroup="xqxsx:expr"/&gt;


  &lt;!-- ApplyExpr:                                             --&gt;
  &lt;!--   ApplyExpr ::= (ConcatExpr ";")+                      --&gt;
  &lt;xsd:complexType name="applyExpr"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="xqxsx:expr"&gt;
        &lt;xsd:sequence&gt;
          &lt;xsd:element name="concatExpr" maxOccurs="unbounded"&gt;
            &lt;xsd:complexType&gt;
              &lt;xsd:sequence&gt;
                &lt;xsd:element ref="xqx:expr" maxOccurs="unbounded"/&gt;
              &lt;/xsd:sequence&gt;
            &lt;/xsd:complexType&gt;
          &lt;/xsd:element&gt;
        &lt;/xsd:sequence&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

  &lt;xsd:element name="applyExpr" type="xqxsx:applyExpr"
               substitutionGroup="xqxsx:expr"/&gt;

&lt;/xsd:schema&gt;



&lt;?xml version="1.0"?&gt;
&lt;xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
            targetNamespace="http://www.w3.org/2007/xquery-update-10"
	          elementFormDefault="qualified" attributeFormDefault="qualified"&gt;

&lt;!-- Redefine one or more components of the XQueryX XML Schema --&gt;
&lt;!-- The redefinition starts with XQuery Update Facility 1.0   --&gt;
&lt;!--   XQueryX instead of XQueryX 1.0                          --&gt;
&lt;xsd:redefine schemaLocation="http://www.w3.org/2007/xquery-update-10/xquery-update-10-xqueryx.xsd"&gt;

&lt;!-- Redefine the functionDecl complex type --&gt;
  &lt;xsd:complexType name="functionDecl"&gt;
    &lt;xsd:complexContent&gt;
      &lt;xsd:extension base="functionDecl"&gt;
        &lt;xsd:attribute name="simpleFunction"
                       type="xsd:boolean" default="true"/&gt;
        &lt;xsd:attribute name="updatingFunction"
                       type="xsd:boolean" default="false"/&gt;
        &lt;xsd:attribute name="sequentialFunction"
                       type="xsd:boolean" default="false"/&gt;
      &lt;/xsd:extension&gt;
    &lt;/xsd:complexContent&gt;
  &lt;/xsd:complexType&gt;

&lt;/xsd:redefine&gt;

&lt;/xsd:schema&gt;

</eg></div2><div2 id="id-xqsx-xqueryx-stylesheet"><head>Stylesheet</head><p>
This section specifies the XSLT stylesheet that defines the semantics of XQueryX
in support of XQuery Scripting Extension 1.0. It imports the XSLT stylesheet defined in <bibref ref="XQueryUpdate"/>,
and provides additional templates that
define the semantics of the XQueryX representation of XQuery Scripting Extension 1.0
by transforming that XQueryX representation into
the human readable syntax of XQuery Scripting Extension 1.0. 
A copy of this stylesheet is located at
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx.xsl" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx.xsl</loc>. 
Please note that the content of this stylesheet is subject to change at any time before this document is published as a Recommendation. 
</p><eg xml:space="preserve">

&lt;xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xqx="http://www.w3.org/2005/XQueryX"
                xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
                xmlns:xqxsx="http://www.w3.org/2008/xquery-sx-10"&gt;

&lt;!-- Initial creation                  2008-03-01: Jim Melton --&gt;
&lt;!-- Reviewed, cleaned, corrections    2009-08-17: Jim Melton --&gt;
&lt;!-- Updated to recent grammar changes 2010-02-15: Jim Melton --&gt;

&lt;xsl:import href="http://www.w3.org/2007/xquery-update-10/xquery-update-10-xqueryx.xsl"/&gt;


&lt;!-- constDecl                                                --&gt;
&lt;!-- 2010-02-15: "constant" is now "unassignable variable"    --&gt;
&lt;xsl:template match="xqxsx:constDecl"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;declare unassignable variable &lt;/xsl:text&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:constName"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- Over-ride the template for varDecl in XQueryX.xsd        --&gt;
&lt;!-- 2010-02-15: "variable" is now "assignable variable"      --&gt;
  &lt;xsl:template match="xqx:varDecl" priority="200"&gt;
    &lt;xsl:text&gt;declare assignable variable &lt;/xsl:text&gt;
    &lt;xsl:value-of select="$DOLLAR"/&gt;
    &lt;xsl:apply-templates select="xqx:varName"/&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
    &lt;xsl:if test="xqx:external"&gt;
      &lt;xsl:text&gt; external &lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
    &lt;xsl:if test="xqx:varValue"&gt;
      &lt;xsl:value-of select="$ASSIGN"/&gt;
      &lt;xsl:apply-templates select="xqx:varValue"/&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;


&lt;!-- assignmentExpr                                           --&gt;
&lt;!-- 2010-02-15: Remove 'set' keyword                         --&gt;
&lt;xsl:template match="xqxsx:assignmentExpr"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqx:positionalVariableBinding"/&gt;
  &lt;xsl:text&gt; := &lt;/xsl:text&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:assignedExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- block                                                    --&gt;
&lt;!-- 2010-02-15: Added 'block' keyword                        --&gt;
&lt;xsl:template match="xqxsx:block"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;block &lt;/xsl:text&gt;
  &lt;xsl:value-of select="$LBRACE"/&gt;
  &lt;xsl:value-of select="$SPACE"/&gt;
  &lt;xsl:apply-templates/&gt;
  &lt;xsl:value-of select="$SPACE"/&gt;
  &lt;xsl:value-of select="$RBRACE"/&gt;
  &lt;xsl:value-of select="$SPACE"/&gt;
&lt;/xsl:template&gt;

&lt;!-- blockVarDecl                                             --&gt;
&lt;xsl:template match="xqxsx:blockVarDecl[position()=1 and position()=last()]"&gt;
  &lt;xsl:text&gt;declare &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxsx:varName"/&gt;
  &lt;xsl:if test="xqx:typeDeclaration"&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:if test="xqxsx:varValue"&gt;
    &lt;xsl:text&gt; := &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqxsx:varValue"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:value-of select="$SEMICOLON"/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:blockVarDecl[position()=1 and position()!=last()]"&gt;
  &lt;xsl:text&gt;declare &lt;/xsl:text&gt;
  &lt;xsl:apply-templates select="xqxsx:varName"/&gt;
  &lt;xsl:if test="xqx:typeDeclaration"&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:if test="xqxsx:varValue"&gt;
    &lt;xsl:text&gt; := &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqxsx:varValue"/&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:blockVarDecl[position()&gt;1 and position()&amp;lt;last()]"&gt;
  &lt;xsl:value-of select="$COMMA"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxsx:varName"/&gt;
  &lt;xsl:if test="xqx:typeDeclaration"&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:if test="xqxsx:varValue"&gt;
    &lt;xsl:text&gt; := &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqxsx:varValue"/&gt;
  &lt;/xsl:if&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:blockVarDecl[position()&gt;1 and position()=last()]"&gt;
  &lt;xsl:value-of select="$COMMA"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxsx:varName"/&gt;
  &lt;xsl:if test="xqx:typeDeclaration"&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:if test="xqxsx:varValue"&gt;
    &lt;xsl:text&gt; := &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqxsx:varValue"/&gt;
  &lt;/xsl:if&gt;
  &lt;xsl:value-of select="$SEMICOLON"/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:varName"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:varValue"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;!-- blockBody                                                --&gt;
&lt;xsl:template match="xqxsx:blockBody"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:blockExpr"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- exitExpr                                          --&gt;
&lt;xsl:template match="xqxsx:exitExpr"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;exit returning &lt;/xsl:text&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- whileExpr                                                --&gt;
&lt;xsl:template match="xqxsx:whileExpr"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:text&gt;while &lt;/xsl:text&gt;
  &lt;xsl:value-of select="$LPAREN"/&gt;
  &lt;xsl:value-of select="$SPACE"/&gt;
  &lt;xsl:apply-templates select="xqxsx:whileTest"/&gt;
  &lt;xsl:value-of select="$SPACE"/&gt;
  &lt;xsl:value-of select="$RPAREN"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxsx:block"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:whileTest"&gt;
  &lt;xsl:apply-templates/&gt;
&lt;/xsl:template&gt;


&lt;!-- applyExpr                                                --&gt;
&lt;xsl:template match="xqxsx:applyExpr"&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
  &lt;xsl:apply-templates select="xqxsx:concatExpr"/&gt;
  &lt;xsl:value-of select="$NEWLINE"/&gt;
&lt;/xsl:template&gt;

&lt;xsl:template match="xqxsx:concatExpr"&gt;
  &lt;xsl:apply-templates/&gt;
  &lt;xsl:value-of select="$SEMICOLON"/&gt;
&lt;/xsl:template&gt;


&lt;!-- Over-ride the template for functionDecl in XQuery        --&gt;
&lt;!--   Update Facility xquery-update-10-xqueryx.xsl           --&gt;
  &lt;xsl:template match="xqx:functionDecl" priority="200"&gt;
    &lt;xsl:text&gt;declare &lt;/xsl:text&gt;
    &lt;xsl:choose&gt;
      &lt;xsl:when test="@xqx:updatingFunction and
                      @xqx:updatingFunction = 'true'"&gt;
        &lt;xsl:text&gt;updating &lt;/xsl:text&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:when test="@xqx:sequentialFunction and
                      @xqx:sequentialFunction = 'true'"&gt;
        &lt;xsl:text&gt;sequential &lt;/xsl:text&gt;
      &lt;/xsl:when&gt;
      &lt;xsl:otherwise&gt;
        &lt;xsl:text&gt;simple &lt;/xsl:text&gt;
      &lt;/xsl:otherwise&gt;
    &lt;/xsl:choose&gt;
    &lt;xsl:text&gt;function &lt;/xsl:text&gt;
    &lt;xsl:apply-templates select="xqx:functionName"/&gt;
    &lt;xsl:apply-templates select="xqx:paramList"/&gt;
    &lt;xsl:apply-templates select="xqx:typeDeclaration"/&gt;
    &lt;xsl:apply-templates select="xqx:functionBody"/&gt;
    &lt;xsl:if test="xqx:externalDefinition"&gt;
      &lt;xsl:text&gt; external &lt;/xsl:text&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;



&lt;/xsl:stylesheet&gt;

</eg></div2><div2 id="id-xqsx-xqueryx-examples"><head>Example</head><p>
The following example is based on the data and queries in the use cases
in <bibref ref="ScriptingUseCases"/>. 
In this example, we show the English description of the query,
the XQuery Scripting Extension solution given in <bibref ref="ScriptingUseCases"/>,
an XQueryX solution, and the XQuery Update Facility expression
that results from applying the Update Facility XQueryX-to-XQuery Update Facility transformation
defined by the stylesheet in <specref ref="id-xqsx-xqueryx-stylesheet"/>
to the Scripting Extension XQueryX solution.
The XQuery Scripting Extension expression that is produced is presented only as a sanity-check—the
intent of the stylesheet is not to recreate the original
XQuery expression, but to produce <emph>a</emph> valid
XQuery expression with the same semantics. 
The semantics of the Scripting Extension XQueryX solution are determined by the
semantics of the XQuery Update Facility expression that
results from that transformation. 
The "correctness" of that transformation is determined by
asking the following the question:
Can some Scripting Extension XQueryX processor QX process some
Scripting Extension XQueryX document D1 to produce results R1,
after which the stylesheet is used to translate D1 into an
XQuery Scripting Extension expression E1 that, when processed by some
XQuery Scripting Extension processor Q, produces results R2 that are equivalent
(under some meaningful definition of "equivalent") to results R1?
</p><p>Comparison of the results of the Scripting Extension XQueryX-to-XQuery Scripting Extension
transformation given in this document with the XQuery Scripting Extension solutions
in <bibref ref="ScriptingUseCases"/> may be helpful in evaluating
the correctness of the Update Facility XQueryX solution in each example. </p><p>The XQuery Scripting Extension Use Cases solution given for each
example is provided only to assist readers of this
document in understanding the Scripting Extension XQueryX solution. 
There is no intent to imply that this
document specifies a "compilation" or "transformation" of
XQuery Scripting Extension syntax into Scripting Extension XQueryX syntax. 
</p><p>In the following example, note that path expressions are expanded to show their
structure. Also, note that the prefix syntax for binary operators like "and" makes the
precedence explicit. In general, humans find it easier to read an XML representation
that does not expand path expressions, but it is less convenient for programmatic
representation and manipulation.  XQueryX is designed as a language that is convenient
for production and modification by software, and not as a convenient syntax for humans to
read and write. </p><p>Finally, please note that white space, including new lines, have been added to
some of the Scripting Extension XQueryX documents and
XQuery Scripting Extension expressions for readability. 
That additional white space is not produced by the
Scripting Extension XQueryX-to-XQuery Scripting Extension transformation.</p><p>This example is based on query "Q2" from <bibref ref="ScriptingUseCases"/>,
use case "R": "Scripting Relational Data":</p><div3 id="id-xqsx-xqueryx-xq-rep"><head>XQuery Representation</head><eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name = "Roger Smith"]/userid
let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno = 1007]/bid)
let $newbid := $topbid * 1.1
return
  if($newbid &lt;= 240) then block {
    insert nodes
      &lt;bid_tuple&gt;
        &lt;userid&gt;{ data($uid) }&lt;/userid&gt;
        &lt;itemno&gt;1002&lt;/itemno&gt;
        &lt;bid&gt;{ $newbid }&lt;/bid&gt;
        &lt;bid_date&gt;1999-03-03&lt;/bid_date&gt;
      &lt;/bid_tuple&gt;
    into doc("bids.xml")/bids;
    exit returning &lt;new_bid&gt;{ $newbid }&lt;/new_bid&gt;;
  } else block {
    exit returning &lt;top_bid&gt;{ $topbid }&lt;/top_bid&gt;;
  }
</eg></div3><div3 id="id-xqsx-xqueryx-xqx-rep"><head>XQueryX Representation</head><eg xml:space="preserve">
&lt;!--
let $uid := doc("users.xml")/users/user_tuple[name = "Roger Smith"]/userid
let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno = 1007]/bid)
let $newbid := $topbid * 1.1
return
  if($newbid &lt;= 240) then {
    insert nodes
      &lt;bid_tuple&gt;
        &lt;userid&gt;{ data($uid) }&lt;/userid&gt;
        &lt;itemno&gt;1002&lt;/itemno&gt;
        &lt;bid&gt;{ $newbid }&lt;/bid&gt;
        &lt;bid_date&gt;1999-03-03&lt;/bid_date&gt;
      &lt;/bid_tuple&gt;
    into doc("bids.xml")/bids;
    exit returning &lt;new_bid&gt;{ $newbid }&lt;/new_bid&gt;;
  } else {
    exit returning &lt;top_bid&gt;{ $topbid }&lt;/top_bid&gt;;
  }
--&gt;
&lt;xqx:module xmlns:xqx="http://www.w3.org/2005/XQueryX"
            xmlns:xqxuf="http://www.w3.org/2007/xquery-update-10"
            xmlns:xqxsx="http://www.w3.org/2008/xquery-sx-10"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://www.w3.org/2005/XQueryX
                                  http://www.w3.org/2005/XQueryX/xqueryx.xsd
                                http://www.w3.org/2007/xquery-update-10
http://www.w3.org/2007/xquery-update-10/xquery-update-10-xqueryx.xsd
                                http://www.w3.org/2008/xquery-sx-10
http://www.w3.org/2008/xquery-sx-10/xquery-sx-10-xqueryx.xsd"&gt;

  &lt;xqx:mainModule&gt;
    &lt;xqx:queryBody&gt;
      &lt;xqx:flworExpr&gt;
&lt;!-- let $uid := doc("users.xml")/users/user_tuple[name = "Roger Smith"]/userid --&gt;
        &lt;xqx:letClause&gt;
          &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;uid&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
              &lt;xqx:pathExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:filterExpr&gt;
                    &lt;xqx:functionCallExpr&gt;
                      &lt;xqx:functionName
                        xqx:prefix="fn"&gt;doc&lt;/xqx:functionName&gt;
                      &lt;xqx:arguments&gt;
                        &lt;xqx:stringConstantExpr&gt;
                          &lt;xqx:value&gt;users.xml&lt;/xqx:value&gt;
                        &lt;/xqx:stringConstantExpr&gt;
                      &lt;/xqx:arguments&gt;
                    &lt;/xqx:functionCallExpr&gt;
                  &lt;/xqx:filterExpr&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;users&lt;/xqx:nameTest&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;user-tuple&lt;/xqx:nameTest&gt;
                  &lt;xqx:predicates&gt;
                    &lt;xqx:equalOp&gt;
                      &lt;xqx:firstOperand&gt;
                        &lt;xqx:pathExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                            &lt;xqx:nameTest&gt;name&lt;/xqx:nameTest&gt;
                          &lt;/xqx:stepExpr&gt;
                        &lt;/xqx:pathExpr&gt;
                      &lt;/xqx:firstOperand&gt;
                      &lt;xqx:secondOperand&gt;
                        &lt;xqx:stringConstantExpr&gt;
                          &lt;xqx:value&gt;Roger Smith&lt;/xqx:value&gt;
                        &lt;/xqx:stringConstantExpr&gt;
                      &lt;/xqx:secondOperand&gt;
                    &lt;/xqx:equalOp&gt;
                  &lt;/xqx:predicates&gt;
                &lt;/xqx:stepExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                  &lt;xqx:nameTest&gt;userid&lt;/xqx:nameTest&gt;
                &lt;/xqx:stepExpr&gt;
              &lt;/xqx:pathExpr&gt;
            &lt;/xqx:letExpr&gt;
          &lt;/xqx:letClauseItem&gt;
        &lt;/xqx:letClause&gt;
&lt;!-- let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno = 1007]/bid) --&gt;
        &lt;xqx:letClause&gt;
          &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;topbid&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
              &lt;xqx:pathExpr&gt;
                &lt;xqx:stepExpr&gt;
                  &lt;xqx:filterExpr&gt;
                    &lt;xqx:functionCallExpr&gt;
                      &lt;xqx:functionName
                        xqx:prefix="fn"&gt;max&lt;/xqx:functionName&gt;
                      &lt;xqx:arguments&gt;
                        &lt;xqx:pathExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:filterExpr&gt;
                              &lt;xqx:functionCallExpr&gt;
                                &lt;xqx:functionName
                                  xqx:prefix="fn"&gt;doc&lt;/xqx:functionName&gt;
                                &lt;xqx:arguments&gt;
                                  &lt;xqx:stringConstantExpr&gt;
                                    &lt;xqx:value&gt;bids.xml&lt;/xqx:value&gt;
                                  &lt;/xqx:stringConstantExpr&gt;
                                &lt;/xqx:arguments&gt;
                              &lt;/xqx:functionCallExpr&gt;
                            &lt;/xqx:filterExpr&gt;
                          &lt;/xqx:stepExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                            &lt;xqx:nameTest&gt;bids&lt;/xqx:nameTest&gt;
                          &lt;/xqx:stepExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                            &lt;xqx:nameTest&gt;bid-tuple&lt;/xqx:nameTest&gt;
                            &lt;xqx:predicates&gt;
                              &lt;xqx:equalOp&gt;
                                &lt;xqx:firstOperand&gt;
                                  &lt;xqx:pathExpr&gt;
                                    &lt;xqx:stepExpr&gt;
                                      &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                                      &lt;xqx:nameTest&gt;itemno&lt;/xqx:nameTest&gt;
                                    &lt;/xqx:stepExpr&gt;
                                  &lt;/xqx:pathExpr&gt;
                                &lt;/xqx:firstOperand&gt;
                                &lt;xqx:secondOperand&gt;
                                  &lt;xqx:integerConstantExpr&gt;
                                    &lt;xqx:value&gt;1007&lt;/xqx:value&gt;
                                  &lt;/xqx:integerConstantExpr&gt;
                                &lt;/xqx:secondOperand&gt;
                              &lt;/xqx:equalOp&gt;
                            &lt;/xqx:predicates&gt;
                          &lt;/xqx:stepExpr&gt;
                          &lt;xqx:stepExpr&gt;
                            &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                            &lt;xqx:nameTest&gt;bid&lt;/xqx:nameTest&gt;
                          &lt;/xqx:stepExpr&gt;
                        &lt;/xqx:pathExpr&gt;
                      &lt;/xqx:arguments&gt;
                    &lt;/xqx:functionCallExpr&gt;
                  &lt;/xqx:filterExpr&gt;
                &lt;/xqx:stepExpr&gt;
              &lt;/xqx:pathExpr&gt;
            &lt;/xqx:letExpr&gt;
          &lt;/xqx:letClauseItem&gt;
        &lt;/xqx:letClause&gt;
&lt;!-- let $newbid := $topbid * 1.1 --&gt;
        &lt;xqx:letClause&gt;
          &lt;xqx:letClauseItem&gt;
            &lt;xqx:typedVariableBinding&gt;
              &lt;xqx:varName&gt;newbid&lt;/xqx:varName&gt;
            &lt;/xqx:typedVariableBinding&gt;
            &lt;xqx:letExpr&gt;
              &lt;xqx:multiplyOp&gt;
                &lt;xqx:firstOperand&gt;
                  &lt;xqx:varRef&gt;
                    &lt;xqx:name&gt;topbid&lt;/xqx:name&gt;
                  &lt;/xqx:varRef&gt;
                &lt;/xqx:firstOperand&gt;
                &lt;xqx:secondOperand&gt;
                  &lt;xqx:decimalConstantExpr&gt;
                    &lt;xqx:value&gt;1.1&lt;/xqx:value&gt;
                  &lt;/xqx:decimalConstantExpr&gt;
                &lt;/xqx:secondOperand&gt;
              &lt;/xqx:multiplyOp&gt;
            &lt;/xqx:letExpr&gt;
          &lt;/xqx:letClauseItem&gt;
        &lt;/xqx:letClause&gt;
&lt;!-- return --&gt;
        &lt;xqx:returnClause&gt;
&lt;!--   if($newbid &lt;= 240)        --&gt;
          &lt;xqx:ifThenElseExpr&gt;
            &lt;xqx:ifClause&gt;
              &lt;xqx:lessThanOrEqualOp&gt;
                &lt;xqx:firstOperand&gt;
                  &lt;xqx:varRef&gt;
                    &lt;xqx:name&gt;newbid&lt;/xqx:name&gt;
                  &lt;/xqx:varRef&gt;
                &lt;/xqx:firstOperand&gt;
                &lt;xqx:secondOperand&gt;
                  &lt;xqx:integerConstantExpr&gt;
                    &lt;xqx:value&gt;240&lt;/xqx:value&gt;
                  &lt;/xqx:integerConstantExpr&gt;
                &lt;/xqx:secondOperand&gt;
              &lt;/xqx:lessThanOrEqualOp&gt;
            &lt;/xqx:ifClause&gt;
&lt;!--                      then { --&gt;
            &lt;xqx:thenClause&gt;
              &lt;xqxsx:block&gt;
                &lt;xqxsx:blockBody&gt;
                  &lt;xqxsx:applyExpr&gt;
                    &lt;xqxsx:concatExpr&gt;
&lt;!--     insert nodes --&gt;
                      &lt;xqxuf:insertExpr&gt;
                        &lt;xqxuf:sourceExpr&gt;
&lt;!--       &lt;bid_tuple&gt; --&gt;
                          &lt;xqx:elementConstructor&gt;
                            &lt;xqx:tagName&gt;bid_tuple&lt;/xqx:tagName&gt;
                            &lt;xqx:elementContent&gt;
&lt;!--         &lt;userid&gt;{ data($uid) }&lt;/userid&gt; --&gt;
                              &lt;xqx:elementConstructor&gt;
                                &lt;xqx:tagName&gt;userid&lt;/xqx:tagName&gt;
                                &lt;xqx:elementContent&gt;
                                  &lt;xqx:functionCallExpr&gt;
                                    &lt;xqx:functionName
                                      xqx:prefix="fn"&gt;data&lt;/xqx:functionName&gt;
                                    &lt;xqx:arguments&gt;
                                      &lt;xqx:varRef&gt;
                                        &lt;xqx:name&gt;uid&lt;/xqx:name&gt;
                                      &lt;/xqx:varRef&gt;
                                    &lt;/xqx:arguments&gt;
                                  &lt;/xqx:functionCallExpr&gt;
                                &lt;/xqx:elementContent&gt;
                              &lt;/xqx:elementConstructor&gt;
&lt;!--         &lt;itemno&gt;1002&lt;/itemno&gt; --&gt;
                              &lt;xqx:elementConstructor&gt;
                                &lt;xqx:tagName&gt;itemno&lt;/xqx:tagName&gt;
                                &lt;xqx:elementContent&gt;
                                  &lt;xqx:integerConstantExpr&gt;
                                    &lt;xqx:value&gt;1002&lt;/xqx:value&gt;
                                  &lt;/xqx:integerConstantExpr&gt;
                                &lt;/xqx:elementContent&gt;
                              &lt;/xqx:elementConstructor&gt;
&lt;!--         &lt;bid&gt;{ $newbid }&lt;/bid&gt; --&gt;
                              &lt;xqx:elementConstructor&gt;
                                &lt;xqx:tagName&gt;bid&lt;/xqx:tagName&gt;
                                &lt;xqx:elementContent&gt;
                                  &lt;xqx:varRef&gt;
                                    &lt;xqx:name&gt;newbid&lt;/xqx:name&gt;
                                  &lt;/xqx:varRef&gt;
                                &lt;/xqx:elementContent&gt;
                              &lt;/xqx:elementConstructor&gt;
&lt;!--         &lt;bid_date&gt;1999-03-03&lt;/bid_date&gt; --&gt;
                              &lt;xqx:elementConstructor&gt;
                                &lt;xqx:tagName&gt;bid_date&lt;/xqx:tagName&gt;
                                &lt;xqx:elementContent&gt;
                                  &lt;xqx:stringConstantExpr&gt;
                                    &lt;xqx:value&gt;1999-03-03&lt;/xqx:value&gt;
                                  &lt;/xqx:stringConstantExpr&gt;
                                &lt;/xqx:elementContent&gt;
                              &lt;/xqx:elementConstructor&gt;
                            &lt;/xqx:elementContent&gt;
                          &lt;/xqx:elementConstructor&gt;
                        &lt;/xqxuf:sourceExpr&gt;
&lt;!--     into doc("bids.xml")/bids; --&gt;
                        &lt;xqxuf:insertInto/&gt;
                        &lt;xqxuf:targetExpr&gt;
                          &lt;xqx:pathExpr&gt;
                            &lt;xqx:stepExpr&gt;
                              &lt;xqx:filterExpr&gt;
                                &lt;xqx:functionCallExpr&gt;
                                  &lt;xqx:functionName
                                    xqx:prefix="fn"&gt;doc&lt;/xqx:functionName&gt;
                                  &lt;xqx:arguments&gt;
                                    &lt;xqx:stringConstantExpr&gt;
                                      &lt;xqx:value&gt;bids.xml&lt;/xqx:value&gt;
                                    &lt;/xqx:stringConstantExpr&gt;
                                  &lt;/xqx:arguments&gt;
                                &lt;/xqx:functionCallExpr&gt;
                              &lt;/xqx:filterExpr&gt;
                            &lt;/xqx:stepExpr&gt;
                            &lt;xqx:stepExpr&gt;
                              &lt;xqx:xpathAxis&gt;child&lt;/xqx:xpathAxis&gt;
                              &lt;xqx:nameTest&gt;bids&lt;/xqx:nameTest&gt;
                            &lt;/xqx:stepExpr&gt;
                          &lt;/xqx:pathExpr&gt;
                        &lt;/xqxuf:targetExpr&gt;
                      &lt;/xqxuf:insertExpr&gt;
                    &lt;/xqxsx:concatExpr&gt;
&lt;!--     exit returning &lt;new_bid&gt;{ $newbid }&lt;/new_bid&gt;; --&gt;
                    &lt;xqxsx:concatExpr&gt;
                      &lt;xqxsx:exitExpr&gt;
                        &lt;xqx:elementConstructor&gt;
                          &lt;xqx:tagName&gt;new_bid&lt;/xqx:tagName&gt;
                          &lt;xqx:elementContent&gt;
                            &lt;xqx:varRef&gt;
                              &lt;xqx:name&gt;newbid&lt;/xqx:name&gt;
                            &lt;/xqx:varRef&gt;
                          &lt;/xqx:elementContent&gt;
                        &lt;/xqx:elementConstructor&gt;
                      &lt;/xqxsx:exitExpr&gt;
                    &lt;/xqxsx:concatExpr&gt;
                  &lt;/xqxsx:applyExpr&gt;
                &lt;/xqxsx:blockBody&gt;
              &lt;/xqxsx:block&gt;
            &lt;/xqx:thenClause&gt;
&lt;!--   } else { --&gt;
            &lt;xqx:elseClause&gt;
&lt;!--     exit returning &lt;top_bid&gt;{ $topbid }&lt;/top_bid&gt;; --&gt;
              &lt;xqxsx:block&gt;
                &lt;xqxsx:blockBody&gt;
                  &lt;xqxsx:applyExpr&gt;
                    &lt;xqxsx:concatExpr&gt;
                      &lt;xqxsx:exitExpr&gt;
                        &lt;xqx:elementConstructor&gt;
                          &lt;xqx:tagName&gt;top_bid&lt;/xqx:tagName&gt;
                          &lt;xqx:elementContent&gt;
                            &lt;xqx:varRef&gt;
                              &lt;xqx:name&gt;topbid&lt;/xqx:name&gt;
                            &lt;/xqx:varRef&gt;
                          &lt;/xqx:elementContent&gt;
                        &lt;/xqx:elementConstructor&gt;
                      &lt;/xqxsx:exitExpr&gt;
                    &lt;/xqxsx:concatExpr&gt;
                  &lt;/xqxsx:applyExpr&gt;
                &lt;/xqxsx:blockBody&gt;
              &lt;/xqxsx:block&gt;
            &lt;/xqx:elseClause&gt;
          &lt;/xqx:ifThenElseExpr&gt;
        &lt;/xqx:returnClause&gt;
&lt;!-- } --&gt;
      &lt;/xqx:flworExpr&gt;
    &lt;/xqx:queryBody&gt;
  &lt;/xqx:mainModule&gt;
&lt;/xqx:module&gt;
</eg></div3><div3 id="id-xqsx-xqueryx-transformed-rep"><head>Transformed XQuery Representation</head><p>Application of the stylesheet in <specref ref="id-xqsx-xqueryx-stylesheet"/> to the
Update Facility XQueryX representation results in the following XQuery representation:</p><eg xml:space="preserve">
( let $uid:=fn:doc("users.xml")/child::users/
        child::user-tuple[(child::name = "Roger Smith")]/
        child::userid
  let $topbid:=fn:max(fn:doc("bids.xml")/
        child::bids/child::bid-tuple[(child::itemno = 1007)]/
        child::bid)
  let $newbid:=($topbid*1.1)
  return
    ( if (($newbid &lt;= 240)) then block {
        insert nodes 
          &lt;bid_tuple&gt;
            &lt;userid&gt;{fn:data($uid)}&lt;/userid&gt;
            &lt;itemno&gt;{1002}&lt;/itemno&gt;
            &lt;bid&gt;{$newbid}&lt;/bid&gt;
            &lt;bid_date&gt;{"1999-03-03"}&lt;/bid_date&gt;
          &lt;/bid_tuple&gt;
        into 
          fn:doc("bids.xml")/child::bids;
        exit returning &lt;new_bid&gt;{$newbid}&lt;/new_bid&gt;; }
      else block { 
        exit returning &lt;top_bid&gt;{$topbid}&lt;/top_bid&gt;; } )
)
</eg></div3></div2></div1><div1 id="id-implementation-defined-items"><head>Implementation-Defined Items</head><p>The following items in this specification are implementation-defined:</p><olist><item><p>The effects of <termref def="dt-snapshot">snapshot semantics</termref> on persistent storage. 
             For example, it is implementation-defined whether the effects of an <code>fn:put</code> function
             are visible to an <code>fn:doc</code>, <code>fn:doc-available</code>, or <code>fn:collection</code>
             function executed in a subsequent <termref def="dt-snapshot">snapshot</termref>.</p></item><item><p>The mechanism (if any) by which the XQuery environment exchanges parameters and results
             with an external function.</p></item></olist></div1><div1 id="id-references"><head>References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XQ10" key="XQuery 1.0" href="http://www.w3.org/TR/xquery" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xquery/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 1.0: An XML Query Language</loc>,
          W3C Recommendation, 23 January 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XQX10" key="XML Syntax for XQuery 1.0" href="http://www.w3.org/TR/xqueryx" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xqueryx/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Syntax for XQuery 1.0</loc>,
          W3C Recommendation, 23 January 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XDM" key="XQuery Data Model" href="http://www.w3.org/TR/xpath-datamodel/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xpath-datamodel/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 1.0 and XPath 2.0 Data Model (XDM)</loc>,
          W3C Recommendation, 23 January 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="FO" key="XQuery 1.0 and XPath 2.0 Functions and Operators" href="http://www.w3.org/TR/xpath-functions/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xpath-functions/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 1.0 and XPath 2.0 Functions and Operators</loc>,
          W3C Recommendation, 23 January 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-update-10/" id="XQueryUpdate" key="XQuery Update Facility" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xquery-update-10/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery Update Facility 1.0</loc>,
          W3C Candidate Recommendation, March 2008.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-sx-10-requirements/" id="ScriptingRequirements" key="XQuery Scripting Requirements" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xquery-sx-10-requirements/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery Scripting Extension 1.0 Requirements</loc>,
          W3C Working Draft, 23 March 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-sx-10-use-cases/" id="ScriptingUseCases" key="XQuery Scripting Use Cases" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xquery-sx-10-use-cases/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery Scripting Extension 1.0 Use Cases</loc>,
          W3C Working Draft 23 March 2007.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XQ11" key="XQuery 1.1" href="http://www.w3.org/TR/xquery" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
          <loc href="http://www.w3.org/TR/xquery-11/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 1.1: An XML Query Language</loc>,
          W3C Working Draft, 15 December 2009.</bibl></blist></div1><div1 id="id-errors"><head>Error Conditions</head><div2 id="id-new-error-codes"><head>New Error Codes</head><error-list><error spec="SX" code="0002" class="ST" type="static"><p>
              It is a static error to mix both <termref def="dt-updating-expr">updating</termref> and
              <termref def="dt-sequential-expr">sequential</termref> operands in an expression.
            </p></error><error spec="SX" code="0003" class="DY" type="dynamic"><p>
              It is a dynamic
              error if, after applying a pending update list (using <code>upd:applyUpdates</code>),
              the XDM instance bound to any in-scope variable does not match the static type of that variable according
              to SequenceType matching rules.
            </p></error><error spec="SX" code="0004" class="DY" type="dynamic"><p>
              It is an dynamic error for an external sequential function to return a non-empty <termref def="dt-pul">pending update list</termref>.
            </p></error><error spec="SX" code="0005" class="ST" type="static"><p>
              It is a static error if two or more variables declared in the same block expression
              have the same expanded QName.
            </p></error><error spec="SX" code="0006" class="TY" type="type"><p>
              A reference to a variable, other than on the left-hand side of an assignment expression,
              is an error if the variable has no value in <emph>variable values</emph>
              when the reference is evaluated.
            </p></error><error spec="SX" code="0007" class="ST" type="static"><p>
              The variable on the left-hand side of an assignment must have been declared in one of the following ways:
            </p><ulist><item><p>By a block variable declaration</p></item><item><p>As a parameter to a sequential function</p></item><item><p>By a variable declaration in the Prolog <phrase diff="add">declared as <termref def="dt-assignable">assignable</termref></phrase></p></item></ulist></error><error spec="SX" code="0008" class="ST" type="static"><p>
              It is a static error if the body of a function violates the category rules for it's declared category.
            </p></error><error spec="SX" code="0009" class="ST" type="static"><p>
              A static error is raised if the value for a
              <code>xqsx:query-mode</code> option or pragma is not either <code>sequential</code> or <code>simple</code>.
            </p></error></error-list></div2><div2 id="id-amended-error-codes"><head>Amendments to Existing Error Codes</head><error-list><error spec="XU" code="0001" class="ST" type="static"><p>
              It is a static error for an <termref def="dt-updating-expr">updating</termref> or
              <termref def="dt-sequential-expr">sequential expression</termref> to occur in the following places:
            </p><olist><item><p>
                  As the initializing expression of a prolog variable.
                </p></item><item><p>
                  As a StepExpr in a RelativePathExpr when <termref def="dt-query-mode">query mode</termref> is <code>simple</code>.
                </p></item><item><p>
                  As the primary expression or a predicate expression of a FilterExpr or AxisStep
                  when <termref def="dt-query-mode">query mode</termref> is <code>simple</code>.
                </p></item><item><p>
                  In the <code>for</code>, <code>let</code>, <code>where</code>, or <code>order by</code>
                  clauses of a FLWOR expression when <termref def="dt-query-mode">query mode</termref> is <code>simple</code>.
                </p></item><item><p>
                  In a quantified expression clause or as the satisfies expression of a quantified expression
                  when <termref def="dt-query-mode">query mode</termref> is <code>simple</code>.
                </p></item></olist></error></error-list></div2></div1><inform-div1 id="id-glossary"><head>Glossary</head><?glossary?></inform-div1><inform-div1 id="id-revisions-log"><head>Revision Log</head><p>This log records the substantive changes that have been made to this document. 
      Minor editorial changes are not included in this log.</p><p>
        This document was built from files checked in on $Date: 2010/05/13 01:11:29 $.
        </p><div2 id="id-log-20081203" diff="add"><head>Since the 3 December 2008 Working Draft</head><ulist><item><p>Changed "exit with" to "exit returning"</p></item><item><p>Relaxed restrictions on where sequential expressions can occur.</p></item><item><p>The type of a block variable is never inferred from it's initializing expression.</p></item><item><p>Removed the "set" keyword from an assignment expression.</p></item><item><p>Changed "variable"/"constant" to "unassignable variable" and "assignable variable".</p></item><item><p>Made execution scope and snapshot scope analogous, so stable functions can change value in subsequent snapshots.</p></item><item><p>Added query mode to the static context, along with an option and pragma to change it.</p></item><item><p>Added error codes for all error conditions.</p></item></ulist></div2><div2 id="id-log-20080328"><head>Since the 28 March 2008 Working Draft</head><ulist><item><p>Relaxed the restrictions on where updating expressions can occur to a superset of those allowed by <bibref ref="XQueryUpdate"/>.</p></item><item><p>Re-check the SequenceType of bound variables after upd:applyUpdates is invoked.</p></item><item><p>Added the "block" keyword to the grammer for block expressions.</p></item><item><p>Removed the break and continue expressions.</p></item><item><p>Added the semi-colon (apply) expression to apply updates, removing the semi-colon separated list from block expressions.</p></item><item><p>Added the ability to set the value of parameters to sequential functions.</p></item></ulist></div2></inform-div1></back></spec>